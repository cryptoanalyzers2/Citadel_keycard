// converted by version 1.3
// on Sun Dec 10 01:43:31 PST 2023

.package CitadelWallet/im/status/keycard {
	.aid 0xA0:0x0:0x0:0x8:0x4:0x0:0x1;
	.version 1.0;

	.imports {
		0xA0:0x0:0x0:0x0:0x62:0x1:0x1 1.5;		//javacard/framework
		0xA0:0x0:0x0:0x0:0x62:0x1:0x2 1.5;		//javacard/security
		0xA0:0x0:0x0:0x0:0x62:0x0:0x1 1.0;		//java/lang
		0xA0:0x0:0x0:0x0:0x62:0x2:0x1 1.5;		//javacardx/crypto
		0xD2:0x76:0x0:0x0:0x85:0x30:0x4A:0x43:0x4F:0x50:0x58 1.24;		//com/nxp/id/jcopx/security
	}

	.applet {
		0xA0:0x0:0x0:0x8:0x4:0x0:0x1:0x3:0x1 CashApplet;
		0xA0:0x0:0x0:0x8:0x4:0x0:0x1:0x2:0x1 IdentApplet;
		0xA0:0x0:0x0:0x8:0x4:0x0:0x1:0x1:0x1 KeycardApplet;
		0xA0:0x0:0x0:0x8:0x4:0x0:0x1:0x4:0x1 NDEFApplet;
	}

	.constantPool {
		// 0
		instanceFieldRef Crypto CashApplet/crypto;
		// 1
		instanceFieldRef 1.16 CashApplet/keypair;
		// 2
		instanceFieldRef 1.19 CashApplet/publicKey;
		// 3
		instanceFieldRef 1.18 CashApplet/privateKey;
		// 4
		instanceFieldRef 1.15 CashApplet/signature;
		// 5
		instanceFieldRef 1.14 Crypto/random;
		// 6
		instanceFieldRef 1.11 Crypto/sha256;
		// 7
		instanceFieldRef 1.22 Crypto/ecdh;
		// 8
		instanceFieldRef 1.11 Crypto/sha512;
		// 9
		instanceFieldRef 3.1 Crypto/aesCbcIso9797m2;
		// 10
		instanceFieldRef 1.15 Crypto/hmacSHA512;
		// 11
		instanceFieldRef 1.23 Crypto/hmacKey;
		// 12
		instanceFieldRef byte[] Crypto/hmacBlock;
		// 13
		instanceFieldRef Crypto KeycardApplet/crypto;
		// 14
		instanceFieldRef SECP256k1 KeycardApplet/secp256k1;
		// 15
		instanceFieldRef ed25519 KeycardApplet/curve25519;
		// 16
		instanceFieldRef byte[] KeycardApplet/uid;
		// 17
		instanceFieldRef 1.19 KeycardApplet/masterPublic;
		// 18
		instanceFieldRef 1.18 KeycardApplet/masterPrivate;
		// 19
		instanceFieldRef byte[] KeycardApplet/masterChainCode;
		// 20
		instanceFieldRef byte[] KeycardApplet/altChainCode;
		// 21
		instanceFieldRef byte[] KeycardApplet/chainCode;
		// 22
		instanceFieldRef byte[] KeycardApplet/keyPath;
		// 23
		instanceFieldRef byte[] KeycardApplet/pinlessPath;
		// 24
		instanceFieldRef byte[] KeycardApplet/tmpPath;
		// 25
		instanceFieldRef byte[] KeycardApplet/keyUID;
		// 26
		instanceFieldRef 1.15 KeycardApplet/signature;
		// 27
		instanceFieldRef byte[] KeycardApplet/derivationOutput;
		// 28
		instanceFieldRef byte[] KeycardApplet/data;
		// 29
		instanceFieldRef 0.9 KeycardApplet/pin;
		// 30
		instanceFieldRef SecureChannel KeycardApplet/secureChannel;
		// 31
		instanceFieldRef 0.9 KeycardApplet/mainPIN;
		// 32
		instanceFieldRef 0.9 KeycardApplet/altPIN;
		// 33
		instanceFieldRef 0.9 KeycardApplet/puk;
		// 34
		instanceFieldRef short KeycardApplet/keyPathLen;
		// 35
		instanceFieldRef short KeycardApplet/pinlessPathLen;
		// 36
		instanceFieldRef boolean KeycardApplet/isExtended;
		// 37
		instanceFieldRef short KeycardApplet/tmpPathLen;
		// 38
		instanceFieldRef 1.18 SECP256k1/tmpECPrivateKey;
		// 39
		instanceFieldRef short NDEFApplet/selectedFile;
		// 40
		instanceFieldRef 1.22 SECP256k1/ecPointMultiplier;
		// 41
		instanceFieldRef short SecureChannel/preassignedPairingOffset;
		// 42
		instanceFieldRef boolean SecureChannel/mutuallyAuthenticated;
		// 43
		instanceFieldRef Crypto SecureChannel/crypto;
		// 44
		instanceFieldRef 1.15 SecureChannel/scMac;
		// 45
		instanceFieldRef 1.20 SecureChannel/scEncKey;
		// 46
		instanceFieldRef 1.20 SecureChannel/scMacKey;
		// 47
		instanceFieldRef byte[] SecureChannel/secret;
		// 48
		instanceFieldRef byte[] SecureChannel/pairingKeys;
		// 49
		instanceFieldRef 1.16 SecureChannel/scKeypair;
		// 50
		instanceFieldRef byte SecureChannel/remainingSlots;
		// 51
		instanceFieldRef byte[] SecureChannel/pairingSecret;
		// 52
		instanceFieldRef byte[] ed25519/DebugMasterPrivateKey;
		// 53
		instanceFieldRef byte[] ed25519/DebugMasterPublicKey;
		// 54
		instanceFieldRef 4.9 ed25519/eccPriKey;
		// 55
		instanceFieldRef 4.10 ed25519/eccPubKey;
		// 56
		staticFieldRef byte[] SECP256k1/SECP256K1_R;
		// 57
		staticMethodRef Crypto/ucmp256([BS[BS)S;
		// 58
		staticMethodRef Crypto/addm256([BS[BS[BS[BS)V;
		// 59
		staticMethodRef Crypto/isZero256([BS)Z;
		// 60
		staticFieldRef byte[] Crypto/KEY_BITCOIN_SEED;
		// 61
		staticFieldRef byte[] Crypto/MAX_S;
		// 62
		staticFieldRef byte[] Crypto/S_SUB;
		// 63
		staticMethodRef Crypto/sub256([BS[BS[BS)S;
		// 64
		virtualMethodRef 1.15.5([BSS[BS)S;		// sign([BSS[BS)S
		// 65
		staticMethodRef 0.16.3([BSSB)S;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
		// 66
		virtualMethodRef 1.11.5([BSS)V;		// update([BSS)V
		// 67
		virtualMethodRef 1.11.1([BSS[BS)S;		// doFinal([BSS[BS)S
		// 68
		staticMethodRef Crypto/add256([BS[BS[BS)S;
		// 69
		classRef IdentApplet;
		// 70
		staticMethodRef IdentApplet/<init>([BSB)V;
		// 71
		staticFieldRef 1.18 SharedMemory/idPrivate;
		// 72
		staticFieldRef byte[] SharedMemory/idCert;
		// 73
		virtualMethodRef 0.3.2([BSB)V;		// register([BSB)V
		// 74
		virtualMethodRef 0.3.3()Z;		// selectingApplet()Z
		// 75
		staticMethodRef IdentApplet/processSelect(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 76
		staticMethodRef IdentApplet/processStoreData(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 77
		virtualMethodRef SecureChannel/isOpen()Z;
		// 78
		virtualMethodRef SecureChannel/preprocessAPDU([B)S;
		// 79
		virtualMethodRef SecureChannel/respond(Ljavacard/framework/APDU;SS)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 80
		classRef KeycardApplet;
		// 81
		staticMethodRef KeycardApplet/<init>([BSB)V;
		// 82
		classRef 1.18;		// javacard/security/ECPrivateKey
		// 83
		classRef SECP256k1;
		// 84
		staticMethodRef SECP256k1/<init>()V;
		// 85
		classRef Crypto;
		// 86
		classRef ed25519;
		// 87
		staticMethodRef ed25519/<init>()V;
		// 88
		staticMethodRef SECP256k1/setCurveParameters(Ljavacard/security/ECKey;)V;
			.descriptor	Ljavacard/security/ECKey;	1.17;

		// 89
		virtualMethodRef 1.16.1()V;		// genKeyPair()V
		// 90
		virtualMethodRef 1.14.1([BSS)V;		// generateData([BSS)V
		// 91
		staticMethodRef 1.15.0(BZ)Ljavacard/security/Signature;;		// javacard/security/Signature.getInstance(BZ)Ljavacard/security/Signature;
			.descriptor	Ljavacard/security/Signature;	1.15;

		// 92
		staticMethodRef Crypto/<init>()V;
		// 93
		staticMethodRef 0.16.5(BB)S;		// javacard/framework/Util.makeShort(BB)S
		// 94
		staticFieldRef byte[] SharedMemory/cashDataFile;
		// 95
		staticMethodRef 0.16.2([BS[BSS)S;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
		// 96
		virtualMethodRef 0.3.2([BSB)V;		// register([BSB)V
		// 97
		classRef 1.12;		// javacard/security/CryptoException
		// 98
		classRef 2.2;		// java/lang/Exception
		// 99
		virtualMethodRef 0.10.6()S;		// setIncomingAndReceive()S
		// 100
		staticMethodRef KeycardApplet/resetCurveParameters()V;
		// 101
		virtualMethodRef 0.3.3()Z;		// selectingApplet()Z
		// 102
		staticMethodRef CashApplet/selectApplet(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 103
		virtualMethodRef 0.10.1()[B;		// getBuffer()[B
		// 104
		virtualMethodRef 0.3.2([BSB)V;		// register([BSB)V
		// 105
		classRef 0.7;		// javacard/framework/ISOException
		// 106
		staticMethodRef CashApplet/sign(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 107
		staticMethodRef IdentApplet/identifyCard(Ljavacard/framework/APDU;LCitadelWallet/im/status/keycard/SecureChannel;Ljavacard/security/Signature;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;
			.descriptor	Ljavacard/security/Signature;	1.15;

		// 108
		classRef SecureChannel;
		// 109
		staticMethodRef SecureChannel/<init>(BLCitadelWallet/im/status/keycard/Crypto;LCitadelWallet/im/status/keycard/SECP256k1;)V;
		// 110
		staticMethodRef KeycardApplet/processInit(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 111
		virtualMethodRef 0.3.3()Z;		// selectingApplet()Z
		// 112
		staticMethodRef KeycardApplet/selectApplet(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 113
		virtualMethodRef SecureChannel/openSecureChannel(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 114
		virtualMethodRef SecureChannel/mutuallyAuthenticate(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 115
		virtualMethodRef SecureChannel/pair(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 116
		staticMethodRef KeycardApplet/unpair(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 117
		staticMethodRef KeycardApplet/getStatus(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 118
		staticMethodRef KeycardApplet/verifyPIN(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 119
		staticMethodRef KeycardApplet/changePIN(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 120
		staticMethodRef KeycardApplet/unblockPIN(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 121
		staticMethodRef KeycardApplet/loadKey(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 122
		staticMethodRef KeycardApplet/deriveKey(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 123
		staticMethodRef KeycardApplet/generateMnemonic(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 124
		staticMethodRef KeycardApplet/removeKey(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 125
		staticMethodRef KeycardApplet/generateKey(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 126
		staticMethodRef KeycardApplet/sign(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 127
		staticMethodRef KeycardApplet/setPinlessPath(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 128
		staticMethodRef KeycardApplet/exportKey(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 129
		staticMethodRef KeycardApplet/getData(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 130
		staticMethodRef KeycardApplet/storeData(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 131
		staticMethodRef KeycardApplet/factoryReset(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 132
		virtualMethodRef 0.7.1()S;		// getReason()S
		// 133
		staticMethodRef KeycardApplet/handleException(Ljavacard/framework/APDU;S)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 134
		staticMethodRef KeycardApplet/shouldRespond(Ljavacard/framework/APDU;)Z;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 135
		virtualMethodRef SecureChannel/copyPublicKey([BS)S;
		// 136
		virtualMethodRef SecureChannel/oneShotDecrypt([B)V;
		// 137
		staticMethodRef KeycardApplet/allDigits([BSS)Z;
		// 138
		virtualMethodRef SecureChannel/initSecureChannel([BS)V;
		// 139
		classRef 0.9;		// javacard/framework/OwnerPIN
		// 140
		staticMethodRef 0.9.0(BB)V;		// javacard/framework/OwnerPIN.<init>(BB)V
		// 141
		staticMethodRef 0.7.1(S)V;		// javacard/framework/ISOException.throwIt(S)V
		// 142
		virtualMethodRef 0.9.8([BSB)V;		// update([BSB)V
		// 143
		virtualMethodRef 1.12.1()S;		// getReason()S
		// 144
		staticMethodRef 0.16.6([BSS)S;		// javacard/framework/Util.setShort([BSS)S
		// 145
		virtualMethodRef 0.10.11()B;		// getCurrentState()B
		// 146
		virtualMethodRef 0.9.4()Z;		// isValidated()Z
		// 147
		virtualMethodRef SecureChannel/unpair([B)V;
		// 148
		virtualMethodRef 0.9.5()V;		// reset()V
		// 149
		virtualMethodRef SecureChannel/reset()V;
		// 150
		virtualMethodRef SecureChannel/getRemainingPairingSlots()B;
		// 151
		staticMethodRef KeycardApplet/getApplicationStatus([BS)S;
		// 152
		staticMethodRef KeycardApplet/getKeyStatus([BS)S;
		// 153
		virtualMethodRef 0.9.2()B;		// getTriesRemaining()B
		// 154
		virtualMethodRef 0.10.8(SS)V;		// setOutgoingAndSend(SS)V
		// 155
		virtualMethodRef 0.9.1([BSB)Z;		// check([BSB)Z
		// 156
		virtualMethodRef 0.9.6()V;		// resetAndUnblock()V
		// 157
		staticMethodRef KeycardApplet/changeUserPIN([BB)V;
		// 158
		staticMethodRef KeycardApplet/changePUK([BB)V;
		// 159
		staticMethodRef KeycardApplet/changePairingSecret([BB)V;
		// 160
		virtualMethodRef SecureChannel/updatePairingSecret([BB)V;
		// 161
		staticMethodRef KeycardApplet/loadKeyPair([B)V;
		// 162
		staticMethodRef KeycardApplet/loadSeed([B)V;
		// 163
		virtualMethodRef 1.15.3(Ljavacard/security/Key;B)V;		// init(Ljavacard/security/Key;B)V
			.descriptor	Ljavacard/security/Key;	1.0;

		// 164
		staticMethodRef KeycardApplet/generateKeyUIDAndRespond(Ljavacard/framework/APDU;[B)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 165
		virtualMethodRef 1.15.9([BSS[BS)S;		// signPreComputedHash([BSS[BS)S
		// 166
		staticMethodRef 0.8.1()V;		// javacard/framework/JCSystem.beginTransaction()V
		// 167
		staticMethodRef 0.16.1([BS[BSS)S;		// javacard/framework/Util.arrayCopy([BS[BSS)S
		// 168
		virtualMethodRef SECP256k1/derivePublicKey(Ljavacard/security/ECPrivateKey;[BS)S;
			.descriptor	Ljavacard/security/ECPrivateKey;	1.18;

		// 169
		staticMethodRef KeycardApplet/resetKeyStatus()V;
		// 170
		staticMethodRef 0.8.2()V;		// javacard/framework/JCSystem.commitTransaction()V
		// 171
		virtualMethodRef Crypto/bip32MasterFromSeed([BSS[BS)V;
		// 172
		staticMethodRef KeycardApplet/updateDerivationPath([BSSB)V;
		// 173
		virtualMethodRef KeycardApplet/commitTmpPath()V;
		// 174
		virtualMethodRef Crypto/fixS([BS)S;
		// 175
		virtualMethodRef SECP256k1/derivePublicKey([BS[BS)S;
		// 176
		virtualMethodRef Crypto/bip32CKDPriv([BS[BS[BS[BS)Z;
		// 177
		staticMethodRef 0.16.4([BS)S;		// javacard/framework/Util.getShort([BS)S
		// 178
		staticMethodRef KeycardApplet/logicrShift(SS)S;
		// 179
		staticMethodRef KeycardApplet/clearKeys()V;
		// 180
		staticMethodRef 0.8.17()Z;		// javacard/framework/JCSystem.isObjectDeletionSupported()Z
		// 181
		staticMethodRef 0.8.18()V;		// javacard/framework/JCSystem.requestObjectDeletion()V
		// 182
		staticMethodRef KeycardApplet/isPinless()Z;
		// 183
		virtualMethodRef ed25519/GetPublicKey([BS)S;
		// 184
		virtualMethodRef ed25519/SignData([BSS[BS)S;
		// 185
		staticMethodRef KeycardApplet/doDerive([BS)V;
		// 186
		staticMethodRef 2.0.0()V;		// java/lang/Object.<init>()V
		// 187
		staticMethodRef KeycardApplet/isEIP1581()Z;
		// 188
		staticFieldRef byte[] SharedMemory/ndefDataFile;
		// 189
		staticMethodRef 0.16.0([BS[BSS)B;		// javacard/framework/Util.arrayCompare([BS[BSS)B
		// 190
		staticFieldRef byte[] KeycardApplet/EIP_1581_PREFIX;
		// 191
		classRef NDEFApplet;
		// 192
		staticMethodRef NDEFApplet/<init>([BSB)V;
		// 193
		virtualMethodRef 0.3.2([BSB)V;		// register([BSB)V
		// 194
		virtualMethodRef 0.3.3()Z;		// selectingApplet()Z
		// 195
		staticMethodRef 1.14.0(B)Ljavacard/security/RandomData;;		// javacard/security/RandomData.getInstance(B)Ljavacard/security/RandomData;
			.descriptor	Ljavacard/security/RandomData;	1.14;

		// 196
		staticMethodRef NDEFApplet/processSelect(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 197
		staticMethodRef NDEFApplet/processReadBinary(Ljavacard/framework/APDU;)V;
			.descriptor	Ljavacard/framework/APDU;	0.10;

		// 198
		staticFieldRef byte[] NDEFApplet/NDEF_CAPS_FILE;
		// 199
		virtualMethodRef 0.10.10()S;		// setOutgoingNoChaining()S
		// 200
		virtualMethodRef 0.10.9(S)V;		// setOutgoingLength(S)V
		// 201
		virtualMethodRef 0.10.5([BSS)V;		// sendBytesLong([BSS)V
		// 202
		staticMethodRef CashApplet/<init>([BSB)V;
		// 203
		staticFieldRef byte[] SECP256k1/SECP256K1_A;
		// 204
		classRef 1.17;		// javacard/security/ECKey
		// 205
		staticFieldRef byte[] SECP256k1/SECP256K1_B;
		// 206
		staticFieldRef byte[] SECP256k1/SECP256K1_FP;
		// 207
		staticFieldRef byte[] SECP256k1/SECP256K1_G;
		// 208
		virtualMethodRef SECP256k1/multiplyPoint(Ljavacard/security/ECPrivateKey;[BSS[BS)S;
			.descriptor	Ljavacard/security/ECPrivateKey;	1.18;

		// 209
		virtualMethodRef 1.22.1(Ljavacard/security/PrivateKey;)V;		// init(Ljavacard/security/PrivateKey;)V
			.descriptor	Ljavacard/security/PrivateKey;	1.2;

		// 210
		virtualMethodRef 1.22.3([BSS[BS)S;		// generateSecret([BSS[BS)S
		// 211
		staticMethodRef 1.11.0(BZ)Ljavacard/security/MessageDigest;;		// javacard/security/MessageDigest.getInstance(BZ)Ljavacard/security/MessageDigest;
			.descriptor	Ljavacard/security/MessageDigest;	1.11;

		// 212
		classRef 1.16;		// javacard/security/KeyPair
		// 213
		staticMethodRef 1.22.0(BZ)Ljavacard/security/KeyAgreement;;		// javacard/security/KeyAgreement.getInstance(BZ)Ljavacard/security/KeyAgreement;
			.descriptor	Ljavacard/security/KeyAgreement;	1.22;

		// 214
		staticMethodRef 1.16.0(BS)V;		// javacard/security/KeyPair.<init>(BS)V
		// 215
		classRef 1.20;		// javacard/security/AESKey
		// 216
		classRef CashApplet;
		// 217
		staticMethodRef 3.1.0(BZ)Ljavacardx/crypto/Cipher;;		// javacardx/crypto/Cipher.getInstance(BZ)Ljavacardx/crypto/Cipher;
			.descriptor	Ljavacardx/crypto/Cipher;	3.1;

		// 218
		virtualMethodRef 1.16.3()Ljavacard/security/PublicKey;;		// getPublic()Ljavacard/security/PublicKey;
			.descriptor	Ljavacard/security/PublicKey;	1.3;

		// 219
		classRef 1.19;		// javacard/security/ECPublicKey
		// 220
		staticMethodRef 1.13.0(BSZ)Ljavacard/security/Key;;		// javacard/security/KeyBuilder.buildKey(BSZ)Ljavacard/security/Key;
			.descriptor	Ljavacard/security/Key;	1.0;

		// 221
		classRef 1.23;		// javacard/security/HMACKey
		// 222
		staticMethodRef 0.3.0()V;		// javacard/framework/Applet.<init>()V
		// 223
		virtualMethodRef 3.1.4(Ljavacard/security/Key;B[BSS)V;		// init(Ljavacard/security/Key;B[BSS)V
			.descriptor	Ljavacard/security/Key;	1.0;

		// 224
		virtualMethodRef 3.1.1([BSS[BS)S;		// doFinal([BSS[BS)S
		// 225
		staticMethodRef SecureChannel/checkPairingIndexAndGetOffset(B)S;
		// 226
		staticMethodRef SecureChannel/pairStep1([B)S;
		// 227
		staticMethodRef SecureChannel/pairStep2([B)S;
		// 228
		staticMethodRef SecureChannel/verifyAESMAC([BS)Z;
		// 229
		virtualMethodRef 1.15.6([BSS)V;		// update([BSS)V
		// 230
		virtualMethodRef 1.15.7([BSS[BSS)Z;		// verify([BSS[BSS)Z
		// 231
		staticMethodRef SecureChannel/computeAESMAC(S[B)V;
		// 232
		staticMethodRef 0.8.13(SB)[B;		// javacard/framework/JCSystem.makeTransientByteArray(SB)[B
		// 233
		virtualMethodRef 1.16.2()Ljavacard/security/PrivateKey;;		// getPrivate()Ljavacard/security/PrivateKey;
			.descriptor	Ljavacard/security/PrivateKey;	1.2;

		// 234
		staticMethodRef 4.11.1(BB)Ljavacard/security/Key;;		// com/nxp/id/jcopx/security/KeyBuilderX.buildKey(BB)Ljavacard/security/Key;
			.descriptor	Ljavacard/security/Key;	1.0;

		// 235
		classRef 4.9;		// com/nxp/id/jcopx/security/ECPrivateKeyWithPredefinedParameters
		// 236
		virtualMethodRef Crypto/bip32IsHardened([BS)Z;
		// 237
		classRef 4.10;		// com/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters
		// 238
		staticMethodRef Crypto/hmacSHA512([BSS[BSS[BS)V;
		// 239
		staticMethodRef 4.11.2(Ljavacard/security/PrivateKey;Ljavacard/security/PublicKey;)V;		// com/nxp/id/jcopx/security/KeyBuilderX.genKeyPair(Ljavacard/security/PrivateKey;Ljavacard/security/PublicKey;)V
			.descriptor	Ljavacard/security/PrivateKey;	1.2;
			.descriptor	Ljavacard/security/PublicKey;	1.3;

		// 240
		staticMethodRef 4.1.2(Ljavacard/security/Key;B[BSS[BS)S;		// com/nxp/id/jcopx/security/CryptoBaseX.sign(Ljavacard/security/Key;B[BSS[BS)S
			.descriptor	Ljavacard/security/Key;	1.0;

		// 241
		staticMethodRef ed25519/BigToLittleEndian([BSS)V;
		// 242
		staticMethodRef 4.1.3(Ljavacard/security/Key;B[BSS[BSS)S;		// com/nxp/id/jcopx/security/CryptoBaseX.verify(Ljavacard/security/Key;B[BSS[BSS)S
			.descriptor	Ljavacard/security/Key;	1.0;

		// 243
		staticMethodRef ed25519/LittleToBigEndian([BSS)V;
	}

	.class public CashApplet 0 extends 0.3 {		// extends javacard/framework/Applet

		.fields {
			private 1.16 keypair 0;		// Ljavacard/security/KeyPair;
			private 1.19 publicKey 1;		// Ljavacard/security/ECPublicKey;
			private 1.18 privateKey 2;		// Ljavacard/security/ECPrivateKey;
			private Crypto crypto 3;		// LCitadelWallet/im/status/keycard/Crypto;
			private 1.15 signature 4;		// Ljavacard/security/Signature;
			private static final short SIGN_OUT_OFF = 37;		// S
			private static final byte TLV_PUB_DATA = -126;		// B
		}

		.publicMethodTable 7 {
			equals(Ljava/lang/Object;)Z;
			register()V;
			register([BSB)V;
			selectingApplet()Z;
			deselect()V;
			getShareableInterfaceObject(Ljavacard/framework/AID;B)Ljavacard/framework/Shareable;;
			select()Z;
			process(Ljavacard/framework/APDU;)V;
		}

		.packageMethodTable 0 {
		}

		.method public static install([BSB)V 0 {
			.stack 4;
			.locals 0;

				L0:	new 216;		// CitadelWallet/im/status/keycard/CashApplet
					aload_0;
					sload_1;
					sload_2;
					invokespecial 202;		// CitadelWallet/im/status/keycard/CashApplet.<init>([BSB)V
					return;
		}

		.method public <init>([BSB)V 1 {
			.stack 6;
			.locals 2;

				L0:	aload_0;
					invokespecial 222;		// javacard/framework/Applet.<init>()V
					aload_0;
					new 85;		// CitadelWallet/im/status/keycard/Crypto
					dup;
					invokespecial 92;		// CitadelWallet/im/status/keycard/Crypto.<init>()V
					putfield_a 0;		// reference CitadelWallet/im/status/keycard/CashApplet.crypto
					aload_0;
					new 212;		// javacard/security/KeyPair
					dup;
					sconst_5;
					sspush 256;
					invokespecial 214;		// javacard/security/KeyPair.<init>(BS)V
					putfield_a 1;		// reference CitadelWallet/im/status/keycard/CashApplet.keypair
					aload_0;
					getfield_a_this 1;		// reference CitadelWallet/im/status/keycard/CashApplet.keypair
					invokevirtual 218;		// getPublic()Ljavacard/security/PublicKey;
					checkcast 0 219;		// T_CLASSORINTERFACE javacard/security/ECPublicKey
					putfield_a 2;		// reference CitadelWallet/im/status/keycard/CashApplet.publicKey
					aload_0;
					getfield_a_this 1;		// reference CitadelWallet/im/status/keycard/CashApplet.keypair
					invokevirtual 233;		// getPrivate()Ljavacard/security/PrivateKey;
					checkcast 0 82;		// T_CLASSORINTERFACE javacard/security/ECPrivateKey
					putfield_a 3;		// reference CitadelWallet/im/status/keycard/CashApplet.privateKey
					getfield_a_this 2;		// reference CitadelWallet/im/status/keycard/CashApplet.publicKey
					invokestatic 88;		// CitadelWallet/im/status/keycard/SECP256k1.setCurveParameters(Ljavacard/security/ECKey;)V
					getfield_a_this 3;		// reference CitadelWallet/im/status/keycard/CashApplet.privateKey
					invokestatic 88;		// CitadelWallet/im/status/keycard/SECP256k1.setCurveParameters(Ljavacard/security/ECKey;)V
					getfield_a_this 1;		// reference CitadelWallet/im/status/keycard/CashApplet.keypair
					invokevirtual 89;		// genKeyPair()V
					aload_0;
					bspush 33;
					sconst_0;
					invokestatic 91;		// javacard/security/Signature.getInstance(BZ)Ljavacard/security/Signature;
					putfield_a 4;		// reference CitadelWallet/im/status/keycard/CashApplet.signature
					sload_2;
					aload_1;
					sload_2;
					baload;
					sadd;
					sconst_1;
					sadd;
					sstore 4;
				L1:	sload 4;
					aload_1;
					sload 4;
					baload;
					sconst_1;
					sadd;
					sadd;
					sstore 4;
					sconst_0;
					aload_1;
					sload 4;
					baload;
					invokestatic 93;		// javacard/framework/Util.makeShort(BB)S
					sstore 5;
				L2:	sload 5;
					ifle L4;
				L3:	aload_1;
					sload 4;
					getstatic_a 94;		// reference CitadelWallet/im/status/keycard/SharedMemory.cashDataFile
					sconst_0;
					sload 5;
					sconst_1;
					sadd;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
				L4:	aload_0;
					aload_1;
					sload_2;
					sconst_1;
					sadd;
					aload_1;
					sload_2;
					baload;
					invokevirtual 96;		// register([BSB)V
					return;
		}

		.method public process(Ljavacard/framework/APDU;)V 7 {
			.stack 3;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 99;		// setIncomingAndReceive()S
					pop;
					aload_0;
					invokevirtual 101;		// selectingApplet()Z
					ifeq L2;
				L1:	aload_0;
					aload_1;
					invokespecial 102;		// CitadelWallet/im/status/keycard/CashApplet.selectApplet(Ljavacard/framework/APDU;)V
					return;
				L2:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L3:	aload_2;
					sconst_1;
					baload;
					slookupswitch L6 2 -64 L4 20 L5;
				L4:	aload_0;
					aload_1;
					invokespecial 106;		// CitadelWallet/im/status/keycard/CashApplet.sign(Ljavacard/framework/APDU;)V
					goto L12;
				L5:	aload_1;
					aconst_null;
					getfield_a_this 4;		// reference CitadelWallet/im/status/keycard/CashApplet.signature
					invokestatic 107;		// CitadelWallet/im/status/keycard/IdentApplet.identifyCard(Ljavacard/framework/APDU;LCitadelWallet/im/status/keycard/SecureChannel;Ljavacard/security/Signature;)V
					goto L12;
				L6:	sspush 27904;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L7:	goto L12;
				L8:	astore_3;
				L9:	sspush 28416;
					aload_3;
					invokevirtual 143;		// getReason()S
					sor;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L10:	goto L12;
				L11:	pop;
					sspush 28416;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L12:	return;
			.exceptionTable {
				// start_block end_block handler_block catch_type_index
				L3 L7 L8 97;
				L3 L7 L11 98;
			}
		}

		.method private selectApplet(Ljavacard/framework/APDU;)V {
			.stack 6;
			.locals 4;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	sconst_0;
					sstore_3;
				L2:	aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush -92;
					bastore;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sstore 4;
				L3:	aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush -128;
					bastore;
					getfield_a_this 2;		// reference CitadelWallet/im/status/keycard/CashApplet.publicKey
					aload_2;
					sload_3;
					sconst_1;
					sadd;
					invokeinterface 3 219 19;		// javacard/security/ECPublicKey
					sstore 5;
				L4:	aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sload 5;
					s2b;
					bastore;
					sload_3;
					sload 5;
					sadd;
					sstore_3;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sconst_2;
					bastore;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sconst_2;
					bastore;
					aload_2;
					sload_3;
					sspush 769;
					invokestatic 144;		// javacard/framework/Util.setShort([BSS)S
					pop;
					sinc 3 2;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush -126;
					bastore;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					getstatic_a 94;		// reference CitadelWallet/im/status/keycard/SharedMemory.cashDataFile
					sconst_0;
					baload;
					bastore;
					getstatic_a 94;		// reference CitadelWallet/im/status/keycard/SharedMemory.cashDataFile
					sconst_1;
					aload_2;
					sload_3;
					getstatic_a 94;		// reference CitadelWallet/im/status/keycard/SharedMemory.cashDataFile
					sconst_0;
					baload;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					sload_3;
					getstatic_a 94;		// reference CitadelWallet/im/status/keycard/SharedMemory.cashDataFile
					sconst_0;
					baload;
					sadd;
					sstore_3;
					aload_2;
					sload 4;
					sload_3;
					sload 4;
					ssub;
					sconst_1;
					ssub;
					s2b;
					bastore;
					aload_1;
					sconst_0;
					sload_3;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
					return;
		}

		.method private sign(Ljavacard/framework/APDU;)V {
			.stack 7;
			.locals 3;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	aload_2;
					bspush 37;
					bspush -96;
					bastore;
					aload_2;
					bspush 40;
					bspush -128;
					bastore;
					aload_2;
					bspush 41;
					bspush 65;
					dup_x 19;
					bastore;
					sstore_3;
				L2:	getfield_a_this 2;		// reference CitadelWallet/im/status/keycard/CashApplet.publicKey
					aload_2;
					bspush 42;
					invokeinterface 3 219 19;		// javacard/security/ECPublicKey
					pop;
					sinc 3 5;
					bspush 37;
					sload_3;
					sadd;
					sstore 4;
				L3:	getfield_a_this 4;		// reference CitadelWallet/im/status/keycard/CashApplet.signature
					getfield_a_this 3;		// reference CitadelWallet/im/status/keycard/CashApplet.privateKey
					sconst_1;
					invokevirtual 163;		// init(Ljavacard/security/Key;B)V
					sload_3;
					getfield_a_this 4;		// reference CitadelWallet/im/status/keycard/CashApplet.signature
					aload_2;
					sconst_5;
					bspush 32;
					aload_2;
					sload 4;
					invokevirtual 165;		// signPreComputedHash([BSS[BS)S
					sadd;
					sstore_3;
					sload_3;
					getfield_a_this 0;		// reference CitadelWallet/im/status/keycard/CashApplet.crypto
					aload_2;
					sload 4;
					invokevirtual 174;		// fixS([BS)S
					sadd;
					sstore_3;
					aload_2;
					bspush 38;
					bspush -127;
					bastore;
					aload_2;
					bspush 39;
					sload_3;
					sconst_3;
					ssub;
					s2b;
					bastore;
					aload_1;
					bspush 37;
					sload_3;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
					return;
		}

	}

	.class public Crypto 1 extends 2.0 {		// extends java/lang/Object

		.fields {
			 1.14 random 0;		// Ljavacard/security/RandomData;
			 1.22 ecdh 1;		// Ljavacard/security/KeyAgreement;
			 1.11 sha256 2;		// Ljavacard/security/MessageDigest;
			 1.11 sha512 3;		// Ljavacard/security/MessageDigest;
			 3.1 aesCbcIso9797m2 4;		// Ljavacardx/crypto/Cipher;
			private 1.15 hmacSHA512 5;		// Ljavacard/security/Signature;
			private 1.23 hmacKey 6;		// Ljavacard/security/HMACKey;
			private byte[] hmacBlock 7;		// [B
			public static final short AES_BLOCK_SIZE = 16;		// S
			static final short KEY_SECRET_SIZE = 32;		// S
			static final short KEY_PUB_SIZE = 65;		// S
			static final short KEY_DERIVATION_SCRATCH_SIZE = 37;		// S
			private static final short HMAC_OUT_SIZE = 64;		// S
			static final short KEY_SECRET_SIZE_ED = 32;		// S
			static final short KEY_PUB_SIZE_ED = 32;		// S
			static final short SIGNATURE_SIZE_ED = 64;		// S
			private static final byte[] MAX_S = {127,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,93,87,110,115,87,-92,80,29,-33,-23,47,70,104,27,32,-96};		// [B
			private static final byte[] S_SUB = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2,-70,-82,-36,-26,-81,72,-96,59,-65,-46,94,-116,-48,54,65,65};		// [B
			private static final byte HMAC_IPAD = 54;		// B
			private static final byte HMAC_OPAD = 92;		// B
			private static final short HMAC_BLOCK_SIZE = 128;		// S
			private static final byte[] KEY_BITCOIN_SEED = {66,105,116,99,111,105,110,32,115,101,101,100};		// [B
		}

		.publicMethodTable 1 {
			equals(Ljava/lang/Object;)Z;
		}

		.packageMethodTable 0 {
			bip32IsHardened([BS)Z;
			bip32CKDPriv([BS[BS[BS[BS)Z;
			bip32MasterFromSeed([BSS[BS)V;
			fixS([BS)S;
		}

		.method  <init>()V {
			.stack 4;
			.locals 0;

				L0:	aload_0;
					invokespecial 186;		// java/lang/Object.<init>()V
					aload_0;
					sconst_2;
					invokestatic 195;		// javacard/security/RandomData.getInstance(B)Ljavacard/security/RandomData;
					putfield_a 5;		// reference CitadelWallet/im/status/keycard/Crypto.random
					aload_0;
					sconst_4;
					sconst_0;
					invokestatic 211;		// javacard/security/MessageDigest.getInstance(BZ)Ljavacard/security/MessageDigest;
					putfield_a 6;		// reference CitadelWallet/im/status/keycard/Crypto.sha256
					aload_0;
					sconst_3;
					sconst_0;
					invokestatic 213;		// javacard/security/KeyAgreement.getInstance(BZ)Ljavacard/security/KeyAgreement;
					putfield_a 7;		// reference CitadelWallet/im/status/keycard/Crypto.ecdh
					aload_0;
					bspush 6;
					sconst_0;
					invokestatic 211;		// javacard/security/MessageDigest.getInstance(BZ)Ljavacard/security/MessageDigest;
					putfield_a 8;		// reference CitadelWallet/im/status/keycard/Crypto.sha512
					aload_0;
					bspush 23;
					sconst_0;
					invokestatic 217;		// javacardx/crypto/Cipher.getInstance(BZ)Ljavacardx/crypto/Cipher;
					putfield_a 9;		// reference CitadelWallet/im/status/keycard/Crypto.aesCbcIso9797m2
				L1:	aload_0;
					bspush 27;
					sconst_0;
					invokestatic 91;		// javacard/security/Signature.getInstance(BZ)Ljavacard/security/Signature;
					putfield_a 10;		// reference CitadelWallet/im/status/keycard/Crypto.hmacSHA512
					aload_0;
					bspush 20;
					sspush 256;
					sconst_0;
					invokestatic 220;		// javacard/security/KeyBuilder.buildKey(BSZ)Ljavacard/security/Key;
					checkcast 0 221;		// T_CLASSORINTERFACE javacard/security/HMACKey
					putfield_a 11;		// reference CitadelWallet/im/status/keycard/Crypto.hmacKey
				L2:	goto L4;
				L3:	pop;
					aload_0;
					aconst_null;
					putfield_a 10;		// reference CitadelWallet/im/status/keycard/Crypto.hmacSHA512
					aload_0;
					sspush 128;
					sconst_1;
					invokestatic 232;		// javacard/framework/JCSystem.makeTransientByteArray(SB)[B
					putfield_a 12;		// reference CitadelWallet/im/status/keycard/Crypto.hmacBlock
				L4:	return;
			.exceptionTable {
				// start_block end_block handler_block catch_type_index
				L1 L2 L3 97;
			}
		}

		.method  bip32IsHardened([BS)Z 128 {
			.stack 2;
			.locals 0;

				L0:	aload_1;
					sload_2;
					baload;
					bspush -128;
					sand;
					bspush -128;
					if_scmpne L2;
				L1:	sconst_1;
					sreturn;
				L2:	sconst_0;
					sreturn;
		}

		.method  bip32CKDPriv([BS[BS[BS[BS)Z 129 {
			.stack 9;
			.locals 1;

				L0:	sload 4;
					sstore 9;
				L1:	aload_0;
					aload_1;
					sload_2;
					invokevirtual 236;		// bip32IsHardened([BS)Z
					ifeq L3;
				L2:	aload_3;
					sload 9;
					dup;
					sconst_1;
					sadd;
					sstore 9;
					sconst_0;
					bastore;
					aload 5;
					sload 6;
					aload_3;
					sload 9;
					bspush 32;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					sstore 9;
					goto L7;
				L3:	aload_3;
					sload 9;
					dup;
					sconst_1;
					sadd;
					sstore 9;
					aload 5;
					sload 6;
					bspush 32;
					sadd;
					bspush 32;
					sadd;
					bspush 65;
					sadd;
					sconst_1;
					ssub;
					baload;
					sconst_1;
					sand;
					ifeq L5;
				L4:	sconst_3;
					goto L6;
				L5:	sconst_2;
				L6:	bastore;
					aload 5;
					sload 6;
					bspush 32;
					sadd;
					bspush 32;
					sadd;
					sconst_1;
					sadd;
					aload_3;
					sload 9;
					bspush 32;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					sstore 9;
				L7:	aload_1;
					sload_2;
					aload_3;
					sload 9;
					sconst_4;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					sstore 9;
					aload_0;
					aload 5;
					sload 6;
					bspush 32;
					sadd;
					bspush 32;
					aload_3;
					sload 4;
					sload 9;
					sload 4;
					ssub;
					aload 7;
					sload 8;
					invokespecial 238;		// CitadelWallet/im/status/keycard/Crypto.hmacSHA512([BSS[BSS[BS)V
					aload_0;
					aload 7;
					sload 8;
					getstatic_a 56;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_R
					sconst_0;
					invokespecial 57;		// CitadelWallet/im/status/keycard/Crypto.ucmp256([BS[BS)S
					iflt L9;
				L8:	sconst_0;
					sreturn;
				L9:	aload_0;
					aload 7;
					sload 8;
					aload 5;
					sload 6;
					getstatic_a 56;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_R
					sconst_0;
					aload 7;
					sload 8;
					invokespecial 58;		// CitadelWallet/im/status/keycard/Crypto.addm256([BS[BS[BS[BS)V
					aload_0;
					aload 7;
					sload 8;
					invokespecial 59;		// CitadelWallet/im/status/keycard/Crypto.isZero256([BS)Z
					ifeq L11;
				L10:	sconst_0;
					goto L12;
				L11:	sconst_1;
				L12:	sreturn;
		}

		.method  bip32MasterFromSeed([BSS[BS)V 130 {
			.stack 9;
			.locals 0;

				L0:	aload_0;
					getstatic_a 60;		// reference CitadelWallet/im/status/keycard/Crypto.KEY_BITCOIN_SEED
					sconst_0;
					getstatic_a 60;		// reference CitadelWallet/im/status/keycard/Crypto.KEY_BITCOIN_SEED
					arraylength;
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					invokespecial 238;		// CitadelWallet/im/status/keycard/Crypto.hmacSHA512([BSS[BSS[BS)V
					return;
		}

		.method  fixS([BS)S 131 {
			.stack 7;
			.locals 2;

				L0:	aload_1;
					sload_2;
					sconst_3;
					sadd;
					baload;
					sload_2;
					sconst_5;
					sadd;
					sadd;
					sstore_3;
				L1:	sconst_0;
					sstore 4;
				L2:	aload_1;
					sload_3;
					baload;
					bspush 33;
					if_scmpne L4;
				L3:	aload_1;
					sload_3;
					sconst_2;
					sadd;
					aload_1;
					sload_3;
					sconst_1;
					sadd;
					bspush 32;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					aload_1;
					sload_3;
					bspush 32;
					bastore;
					aload_1;
					sload_2;
					sconst_1;
					sadd;
					dup2;
					baload;
					sconst_1;
					ssub;
					s2b;
					bastore;
					sconst_m1;
					sstore 4;
				L4:	sinc 3 1;
					sload 4;
					sconst_m1;
					if_scmpeq L6;
				L5:	aload_0;
					aload_1;
					sload_3;
					getstatic_a 61;		// reference CitadelWallet/im/status/keycard/Crypto.MAX_S
					sconst_0;
					invokespecial 57;		// CitadelWallet/im/status/keycard/Crypto.ucmp256([BS[BS)S
					ifle L7;
				L6:	aload_0;
					getstatic_a 62;		// reference CitadelWallet/im/status/keycard/Crypto.S_SUB
					sconst_0;
					aload_1;
					sload_3;
					aload_1;
					sload_3;
					invokespecial 63;		// CitadelWallet/im/status/keycard/Crypto.sub256([BS[BS[BS)S
					pop;
				L7:	sload 4;
					sreturn;
		}

		.method private hmacSHA512([BSS[BSS[BS)V {
			.stack 6;
			.locals 2;

				L0:	getfield_a_this 10;		// reference CitadelWallet/im/status/keycard/Crypto.hmacSHA512
					ifnull L2;
				L1:	getfield_a_this 11;		// reference CitadelWallet/im/status/keycard/Crypto.hmacKey
					aload_1;
					sload_2;
					sload_3;
					invokeinterface 4 221 4;		// javacard/security/HMACKey
					getfield_a_this 10;		// reference CitadelWallet/im/status/keycard/Crypto.hmacSHA512
					getfield_a_this 11;		// reference CitadelWallet/im/status/keycard/Crypto.hmacKey
					sconst_1;
					invokevirtual 163;		// init(Ljavacard/security/Key;B)V
					getfield_a_this 10;		// reference CitadelWallet/im/status/keycard/Crypto.hmacSHA512
					aload 4;
					sload 5;
					sload 6;
					aload 7;
					sload 8;
					invokevirtual 64;		// sign([BSS[BS)S
					pop;
					goto L16;
				L2:	sconst_0;
					sstore 9;
				L3:	goto L15;
				L4:	getfield_a_this 12;		// reference CitadelWallet/im/status/keycard/Crypto.hmacBlock
					sconst_0;
					sspush 128;
					sload 9;
					ifne L6;
				L5:	bspush 54;
					goto L7;
				L6:	bspush 92;
				L7:	invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					sconst_0;
					sstore 10;
				L8:	goto L10;
				L9:	getfield_a_this 12;		// reference CitadelWallet/im/status/keycard/Crypto.hmacBlock
					sload 10;
					dup2;
					baload;
					aload_1;
					sload_2;
					sload 10;
					sadd;
					baload;
					sxor;
					bastore;
					sinc 10 1;
				L10:	sload 10;
					sload_3;
					if_scmplt L9;
				L11:	getfield_a_this 8;		// reference CitadelWallet/im/status/keycard/Crypto.sha512
					getfield_a_this 12;		// reference CitadelWallet/im/status/keycard/Crypto.hmacBlock
					sconst_0;
					sspush 128;
					invokevirtual 66;		// update([BSS)V
					sload 9;
					ifne L13;
				L12:	getfield_a_this 8;		// reference CitadelWallet/im/status/keycard/Crypto.sha512
					aload 4;
					sload 5;
					sload 6;
					aload 7;
					sload 8;
					invokevirtual 67;		// doFinal([BSS[BS)S
					pop;
					goto L14;
				L13:	getfield_a_this 8;		// reference CitadelWallet/im/status/keycard/Crypto.sha512
					aload 7;
					sload 8;
					bspush 64;
					aload 7;
					sload 8;
					invokevirtual 67;		// doFinal([BSS[BS)S
					pop;
				L14:	sload 9;
					sconst_1;
					sadd;
					s2b;
					sstore 9;
				L15:	sload 9;
					sconst_2;
					if_scmplt L4;
				L16:	return;
		}

		.method private addm256([BS[BS[BS[BS)V {
			.stack 7;
			.locals 0;

				L0:	aload_0;
					aload_1;
					sload_2;
					aload_3;
					sload 4;
					aload 7;
					sload 8;
					invokespecial 68;		// CitadelWallet/im/status/keycard/Crypto.add256([BS[BS[BS)S
					ifne L2;
				L1:	aload_0;
					aload 7;
					sload 8;
					aload 5;
					sload 6;
					invokespecial 57;		// CitadelWallet/im/status/keycard/Crypto.ucmp256([BS[BS)S
					ifle L3;
				L2:	aload_0;
					aload 7;
					sload 8;
					aload 5;
					sload 6;
					aload 7;
					sload 8;
					invokespecial 63;		// CitadelWallet/im/status/keycard/Crypto.sub256([BS[BS[BS)S
					pop;
				L3:	return;
		}

		.method private ucmp256([BS[BS)S {
			.stack 3;
			.locals 9;

				L0:	sconst_0;
					sstore 5;
				L1:	sconst_1;
					sstore 6;
				L2:	sconst_0;
					sstore 7;
				L3:	goto L12;
				L4:	aload_1;
					sload_2;
					sload 7;
					sadd;
					baload;
					sspush 255;
					sand;
					sstore 8;
				L5:	aload_3;
					sload 4;
					sload 7;
					sadd;
					baload;
					sspush 255;
					sand;
					sstore 9;
				L6:	sload 9;
					sload 8;
					ssub;
					sstore 10;
				L7:	sload 8;
					sload 9;
					sxor;
					sstore 11;
				L8:	sload 8;
					sload 10;
					sxor;
					sstore 12;
				L9:	sload 10;
					sload 11;
					sload 12;
					sand;
					sxor;
					sstore 13;
				L10:	sload 5;
					sload 13;
					bspush 15;
					sushr;
					sload 6;
					sand;
					sor;
					sstore 5;
					sload 6;
					sload 11;
					sconst_1;
					ssub;
					bspush 15;
					sushr;
					sand;
					sstore 6;
				L11:	sinc 7 1;
				L12:	sload 7;
					bspush 32;
					if_scmplt L4;
				L13:	sload 5;
					sload 5;
					sadd;
					sload 6;
					sadd;
					sconst_1;
					ssub;
					sreturn;
		}

		.method private isZero256([BS)Z {
			.stack 4;
			.locals 2;

				L0:	sconst_0;
					sstore_3;
				L1:	sconst_0;
					sstore 4;
				L2:	goto L4;
				L3:	sload_3;
					aload_1;
					sload_2;
					sload 4;
					sadd;
					baload;
					sor;
					sstore_3;
					sinc 4 1;
				L4:	sload 4;
					bspush 32;
					if_scmplt L3;
				L5:	sload_3;
					ifne L7;
				L6:	sconst_1;
					sreturn;
				L7:	sconst_0;
					sreturn;
		}

		.method private add256([BS[BS[BS)S {
			.stack 4;
			.locals 2;

				L0:	sconst_0;
					sstore 7;
				L1:	bspush 31;
					sstore 8;
				L2:	goto L4;
				L3:	aload_1;
					sload_2;
					sload 8;
					sadd;
					baload;
					sspush 255;
					sand;
					aload_3;
					sload 4;
					sload 8;
					sadd;
					baload;
					sspush 255;
					sand;
					sadd;
					sload 7;
					sadd;
					sstore 7;
					aload 5;
					sload 6;
					sload 8;
					sadd;
					sload 7;
					s2b;
					bastore;
					sload 7;
					bspush 8;
					sshr;
					sstore 7;
					sinc 8 -1;
				L4:	sload 8;
					ifge L3;
				L5:	sload 7;
					sreturn;
		}

		.method private sub256([BS[BS[BS)S {
			.stack 4;
			.locals 2;

				L0:	sconst_0;
					sstore 7;
				L1:	bspush 31;
					sstore 8;
				L2:	goto L7;
				L3:	aload_1;
					sload_2;
					sload 8;
					sadd;
					baload;
					sspush 255;
					sand;
					aload_3;
					sload 4;
					sload 8;
					sadd;
					baload;
					sspush 255;
					sand;
					ssub;
					sload 7;
					ssub;
					sstore 7;
					aload 5;
					sload 6;
					sload 8;
					sadd;
					sload 7;
					s2b;
					bastore;
					sload 7;
					bspush 8;
					sshr;
					ifeq L5;
				L4:	sconst_1;
					goto L6;
				L5:	sconst_0;
				L6:	sstore 7;
					sinc 8 -1;
				L7:	sload 8;
					ifge L3;
				L8:	sload 7;
					sreturn;
		}

	}

	.class public IdentApplet 2 extends 0.3 {		// extends javacard/framework/Applet

		.fields {
			static final byte TLV_CERT = -118;		// B
			static final byte CERT_VALID = -86;		// B
			static final byte INS_IDENTIFY_CARD = 20;		// B
		}

		.publicMethodTable 7 {
			equals(Ljava/lang/Object;)Z;
			register()V;
			register([BSB)V;
			selectingApplet()Z;
			deselect()V;
			getShareableInterfaceObject(Ljavacard/framework/AID;B)Ljavacard/framework/Shareable;;
			select()Z;
			process(Ljavacard/framework/APDU;)V;
		}

		.packageMethodTable 0 {
		}

		.method public static install([BSB)V 0 {
			.stack 4;
			.locals 0;

				L0:	new 69;		// CitadelWallet/im/status/keycard/IdentApplet
					aload_0;
					sload_1;
					sload_2;
					invokespecial 70;		// CitadelWallet/im/status/keycard/IdentApplet.<init>([BSB)V
					return;
		}

		.method public <init>([BSB)V 1 {
			.stack 5;
			.locals 0;

				L0:	aload_0;
					invokespecial 222;		// javacard/framework/Applet.<init>()V
					bspush 12;
					sspush 256;
					sconst_0;
					invokestatic 220;		// javacard/security/KeyBuilder.buildKey(BSZ)Ljavacard/security/Key;
					checkcast 0 82;		// T_CLASSORINTERFACE javacard/security/ECPrivateKey
					putstatic_a 71;		// reference CitadelWallet/im/status/keycard/SharedMemory.idPrivate
					getstatic_a 71;		// reference CitadelWallet/im/status/keycard/SharedMemory.idPrivate
					invokestatic 88;		// CitadelWallet/im/status/keycard/SECP256k1.setCurveParameters(Ljavacard/security/ECKey;)V
					getstatic_a 72;		// reference CitadelWallet/im/status/keycard/SharedMemory.idCert
					sconst_0;
					sconst_0;
					bastore;
					aload_0;
					aload_1;
					sload_2;
					sconst_1;
					sadd;
					aload_1;
					sload_2;
					baload;
					invokevirtual 73;		// register([BSB)V
					return;
		}

		.method public process(Ljavacard/framework/APDU;)V 7 {
			.stack 2;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_0;
					invokevirtual 74;		// selectingApplet()Z
					ifeq L2;
				L1:	aload_0;
					aload_1;
					invokespecial 75;		// CitadelWallet/im/status/keycard/IdentApplet.processSelect(Ljavacard/framework/APDU;)V
					return;
				L2:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L3:	aload_2;
					sconst_1;
					baload;
					stableswitch L5 -30 -30 L4;
				L4:	aload_0;
					aload_1;
					invokespecial 76;		// CitadelWallet/im/status/keycard/IdentApplet.processStoreData(Ljavacard/framework/APDU;)V
					goto L6;
				L5:	sspush 27904;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L6:	return;
		}

		.method private processSelect(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	aload_1;
					invokevirtual 99;		// setIncomingAndReceive()S
					pop;
					getstatic_a 72;		// reference CitadelWallet/im/status/keycard/SharedMemory.idCert
					sconst_0;
					baload;
					bspush -86;
					if_scmpne L3;
				L2:	getstatic_a 72;		// reference CitadelWallet/im/status/keycard/SharedMemory.idCert
					sconst_1;
					aload_2;
					sconst_0;
					bspush 98;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					aload_1;
					sconst_0;
					bspush 98;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
				L3:	return;
		}

		.method private processStoreData(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	getstatic_a 72;		// reference CitadelWallet/im/status/keycard/SharedMemory.idCert
					sconst_0;
					baload;
					bspush -86;
					if_scmpne L2;
				L1:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L2:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L3:	aload_1;
					invokevirtual 99;		// setIncomingAndReceive()S
					pop;
					sconst_0;
					aload_2;
					sconst_4;
					baload;
					invokestatic 93;		// javacard/framework/Util.makeShort(BB)S
					sspush 130;
					if_scmpeq L5;
				L4:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L5:	aload_2;
					sconst_5;
					getstatic_a 72;		// reference CitadelWallet/im/status/keycard/SharedMemory.idCert
					sconst_1;
					bspush 98;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					getstatic_a 71;		// reference CitadelWallet/im/status/keycard/SharedMemory.idPrivate
					aload_2;
					bspush 103;
					bspush 32;
					invokeinterface 4 82 18;		// javacard/security/ECPrivateKey
					getstatic_a 72;		// reference CitadelWallet/im/status/keycard/SharedMemory.idCert
					sconst_0;
					bspush -86;
					bastore;
					return;
		}

		.method static identifyCard(Ljavacard/framework/APDU;LCitadelWallet/im/status/keycard/SecureChannel;Ljavacard/security/Signature;)V {
			.stack 7;
			.locals 4;

			.descriptor	Ljavacard/framework/APDU;	0.10;
			.descriptor	Ljavacard/security/Signature;	1.15;

				L0:	aload_0;
					invokevirtual 103;		// getBuffer()[B
					astore_3;
				L1:	aload_1;
					ifnull L5;
				L2:	aload_1;
					invokevirtual 77;		// isOpen()Z
					ifeq L5;
				L3:	aload_1;
					aload_3;
					invokevirtual 78;		// preprocessAPDU([B)S
					sstore 4;
				L4:	goto L6;
				L5:	aload_3;
					sconst_4;
					baload;
					sspush 255;
					sand;
					sstore 4;
				L6:	getstatic_a 72;		// reference CitadelWallet/im/status/keycard/SharedMemory.idCert
					sconst_0;
					baload;
					bspush -86;
					if_scmpeq L8;
				L7:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L8:	sload 4;
					bspush 32;
					if_scmpeq L10;
				L9:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L10:	bspush 37;
					sstore 5;
				L11:	aload_3;
					sload 5;
					dup;
					sconst_1;
					sadd;
					sstore 5;
					bspush -96;
					bastore;
					aload_3;
					sload 5;
					dup;
					sconst_1;
					sadd;
					sstore 5;
					bspush -127;
					bastore;
					sinc 5 1;
					aload_3;
					sload 5;
					dup;
					sconst_1;
					sadd;
					sstore 5;
					bspush -118;
					bastore;
					aload_3;
					sload 5;
					dup;
					sconst_1;
					sadd;
					sstore 5;
					bspush 98;
					bastore;
					getstatic_a 72;		// reference CitadelWallet/im/status/keycard/SharedMemory.idCert
					sconst_1;
					aload_3;
					sload 5;
					bspush 98;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					sinc 5 98;
					bspush 103;
					sstore 6;
				L12:	aload_2;
					getstatic_a 71;		// reference CitadelWallet/im/status/keycard/SharedMemory.idPrivate
					sconst_1;
					invokevirtual 163;		// init(Ljavacard/security/Key;B)V
					sload 6;
					aload_2;
					aload_3;
					sconst_5;
					bspush 32;
					aload_3;
					sload 5;
					invokevirtual 165;		// signPreComputedHash([BSS[BS)S
					sadd;
					sstore 6;
					aload_3;
					bspush 39;
					sload 6;
					sconst_3;
					ssub;
					s2b;
					bastore;
					aload_1;
					ifnull L15;
				L13:	aload_1;
					invokevirtual 77;		// isOpen()Z
					ifeq L15;
				L14:	aload_1;
					aload_0;
					sload 6;
					sspush -28672;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
					goto L16;
				L15:	aload_0;
					bspush 37;
					sload 6;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
				L16:	return;
		}

	}

	.class public KeycardApplet 3 extends 0.3 {		// extends javacard/framework/Applet

		.fields {
			private 0.9 pin 0;		// Ljavacard/framework/OwnerPIN;
			private 0.9 mainPIN 1;		// Ljavacard/framework/OwnerPIN;
			private 0.9 altPIN 2;		// Ljavacard/framework/OwnerPIN;
			private 0.9 puk 3;		// Ljavacard/framework/OwnerPIN;
			private byte[] uid 4;		// [B
			private SecureChannel secureChannel 5;		// LCitadelWallet/im/status/keycard/SecureChannel;
			private 1.19 masterPublic 6;		// Ljavacard/security/ECPublicKey;
			private 1.18 masterPrivate 7;		// Ljavacard/security/ECPrivateKey;
			private byte[] masterChainCode 8;		// [B
			private byte[] altChainCode 9;		// [B
			private byte[] chainCode 10;		// [B
			private byte[] tmpPath 11;		// [B
			private byte[] keyPath 12;		// [B
			private byte[] pinlessPath 13;		// [B
			private 1.15 signature 14;		// Ljavacard/security/Signature;
			private byte[] keyUID 15;		// [B
			private Crypto crypto 16;		// LCitadelWallet/im/status/keycard/Crypto;
			private SECP256k1 secp256k1 17;		// LCitadelWallet/im/status/keycard/SECP256k1;
			private ed25519 curve25519 18;		// LCitadelWallet/im/status/keycard/ed25519;
			private byte[] derivationOutput 19;		// [B
			private byte[] data 20;		// [B
			private boolean isExtended 21;		// Z
			private short tmpPathLen 22;		// S
			private short keyPathLen 23;		// S
			private short pinlessPathLen 24;		// S
			static final short APPLICATION_VERSION = 769;		// S
			static final byte INS_GET_STATUS = -14;		// B
			static final byte INS_INIT = -2;		// B
			static final byte INS_FACTORY_RESET = -3;		// B
			static final byte INS_VERIFY_PIN = 32;		// B
			static final byte INS_CHANGE_PIN = 33;		// B
			static final byte INS_UNBLOCK_PIN = 34;		// B
			static final byte INS_LOAD_KEY = -48;		// B
			static final byte INS_DERIVE_KEY = -47;		// B
			static final byte INS_GENERATE_MNEMONIC = -46;		// B
			static final byte INS_REMOVE_KEY = -45;		// B
			static final byte INS_GENERATE_KEY = -44;		// B
			static final byte INS_SIGN = -64;		// B
			static final byte INS_SET_PINLESS_PATH = -63;		// B
			static final byte INS_EXPORT_KEY = -62;		// B
			static final byte INS_GET_DATA = -54;		// B
			static final byte INS_STORE_DATA = -30;		// B
			static final short SW_REFERENCED_DATA_NOT_FOUND = 27272;		// S
			static final byte PIN_MIN_RETRIES = 2;		// B
			static final byte PIN_MAX_RETRIES = 10;		// B
			static final byte PUK_MIN_RETRIES = 3;		// B
			static final byte PUK_MAX_RETRIES = 12;		// B
			static final byte PUK_LENGTH = 12;		// B
			static final byte DEFAULT_PUK_MAX_RETRIES = 5;		// B
			static final byte PIN_LENGTH = 6;		// B
			static final byte DEFAULT_PIN_MAX_RETRIES = 3;		// B
			static final byte KEY_PATH_MAX_DEPTH = 10;		// B
			static final byte PAIRING_MAX_CLIENT_COUNT = 5;		// B
			static final byte UID_LENGTH = 16;		// B
			static final byte MAX_DATA_LENGTH = 127;		// B
			static final short CHAIN_CODE_SIZE = 32;		// S
			static final short KEY_UID_LENGTH = 32;		// S
			static final short BIP39_SEED_SIZE = 64;		// S
			static final byte GET_STATUS_P1_APPLICATION = 0;		// B
			static final byte GET_STATUS_P1_KEY_PATH = 1;		// B
			static final byte CHANGE_PIN_P1_USER_PIN = 0;		// B
			static final byte CHANGE_PIN_P1_PUK = 1;		// B
			static final byte CHANGE_PIN_P1_PAIRING_SECRET = 2;		// B
			static final byte LOAD_KEY_P1_EC = 1;		// B
			static final byte LOAD_KEY_P1_EXT_EC = 2;		// B
			static final byte LOAD_KEY_P1_SEED = 3;		// B
			static final byte DERIVE_P1_SOURCE_MASTER = 0;		// B
			static final byte DERIVE_P1_SOURCE_PARENT = 64;		// B
			static final byte DERIVE_P1_SOURCE_CURRENT = -128;		// B
			static final byte DERIVE_P1_SOURCE_PINLESS = -64;		// B
			static final byte DERIVE_P1_SOURCE_MASK = -64;		// B
			static final byte GENERATE_MNEMONIC_P1_CS_MIN = 4;		// B
			static final byte GENERATE_MNEMONIC_P1_CS_MAX = 8;		// B
			static final byte GENERATE_MNEMONIC_TMP_OFF = 85;		// B
			static final byte SIGN_P1_CURRENT_KEY = 0;		// B
			static final byte SIGN_P1_DERIVE = 1;		// B
			static final byte SIGN_P1_DERIVE_AND_MAKE_CURRENT = 2;		// B
			static final byte SIGN_P1_PINLESS = 3;		// B
			static final byte SIGN_P1_ED25519_TEST = 32;		// B
			static final byte SIGN_P1_CURRENT_KEY_ED = 16;		// B
			static final byte SIGN_P1_DERIVE_ED = 17;		// B
			static final byte SIGN_P1_DERIVE_AND_MAKE_CURRENT_ED = 18;		// B
			static final byte SIGN_P1_PINLESS_ED = 19;		// B
			static final byte EXPORT_KEY_P1_CURRENT = 0;		// B
			static final byte EXPORT_KEY_P1_DERIVE = 1;		// B
			static final byte EXPORT_KEY_P1_DERIVE_AND_MAKE_CURRENT = 2;		// B
			static final byte EXPORT_KEY_P2_PRIVATE_AND_PUBLIC = 0;		// B
			static final byte EXPORT_KEY_P2_PUBLIC_ONLY = 1;		// B
			static final byte EXPORT_KEY_P2_EXTENDED_PUBLIC = 2;		// B
			static final byte STORE_DATA_P1_PUBLIC = 0;		// B
			static final byte STORE_DATA_P1_NDEF = 1;		// B
			static final byte STORE_DATA_P1_CASH = 2;		// B
			static final byte FACTORY_RESET_P1_MAGIC = -86;		// B
			static final byte FACTORY_RESET_P2_MAGIC = 85;		// B
			static final byte TLV_SIGNATURE_TEMPLATE = -96;		// B
			static final byte TLV_KEY_TEMPLATE = -95;		// B
			static final byte TLV_PUB_KEY = -128;		// B
			static final byte TLV_PRIV_KEY = -127;		// B
			static final byte TLV_CHAIN_CODE = -126;		// B
			static final byte TLV_APPLICATION_STATUS_TEMPLATE = -93;		// B
			static final byte TLV_INT = 2;		// B
			static final byte TLV_BOOL = 1;		// B
			static final byte TLV_APPLICATION_INFO_TEMPLATE = -92;		// B
			static final byte TLV_UID = -113;		// B
			static final byte TLV_KEY_UID = -114;		// B
			static final byte TLV_CAPABILITIES = -115;		// B
			static final byte CAPABILITY_SECURE_CHANNEL = 1;		// B
			static final byte CAPABILITY_KEY_MANAGEMENT = 2;		// B
			static final byte CAPABILITY_CREDENTIALS_MANAGEMENT = 4;		// B
			static final byte CAPABILITY_NDEF = 8;		// B
			static final byte CAPABILITY_FACTORY_RESET = 16;		// B
			static final byte APPLICATION_CAPABILITIES = 31;		// B
			static final byte[] EIP_1581_PREFIX = {-128,0,0,43,-128,0,0,60,-128,0,6,45};		// [B
		}

		.publicMethodTable 7 {
			equals(Ljava/lang/Object;)Z;
			register()V;
			register([BSB)V;
			selectingApplet()Z;
			deselect()V;
			getShareableInterfaceObject(Ljavacard/framework/AID;B)Ljavacard/framework/Shareable;;
			select()Z;
			process(Ljavacard/framework/APDU;)V;
		}

		.packageMethodTable 0 {
			commitTmpPath()V;
		}

		.method public static install([BSB)V 0 {
			.stack 4;
			.locals 0;

				L0:	new 80;		// CitadelWallet/im/status/keycard/KeycardApplet
					aload_0;
					sload_1;
					sload_2;
					invokespecial 81;		// CitadelWallet/im/status/keycard/KeycardApplet.<init>([BSB)V
					return;
		}

		.method public <init>([BSB)V 1 {
			.stack 5;
			.locals 0;

				L0:	aload_0;
					invokespecial 222;		// javacard/framework/Applet.<init>()V
					aload_0;
					new 85;		// CitadelWallet/im/status/keycard/Crypto
					dup;
					invokespecial 92;		// CitadelWallet/im/status/keycard/Crypto.<init>()V
					putfield_a 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					aload_0;
					new 83;		// CitadelWallet/im/status/keycard/SECP256k1
					dup;
					invokespecial 84;		// CitadelWallet/im/status/keycard/SECP256k1.<init>()V
					putfield_a 14;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secp256k1
					aload_0;
					new 86;		// CitadelWallet/im/status/keycard/ed25519
					dup;
					invokespecial 87;		// CitadelWallet/im/status/keycard/ed25519.<init>()V
					putfield_a 15;		// reference CitadelWallet/im/status/keycard/KeycardApplet.curve25519
					aload_0;
					bspush 16;
					newarray 11;
					putfield_a 16;		// reference CitadelWallet/im/status/keycard/KeycardApplet.uid
					getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a 5;		// reference CitadelWallet/im/status/keycard/Crypto.random
					getfield_a_this 16;		// reference CitadelWallet/im/status/keycard/KeycardApplet.uid
					sconst_0;
					bspush 16;
					invokevirtual 90;		// generateData([BSS)V
					aload_0;
					bspush 11;
					sspush 256;
					sconst_0;
					invokestatic 220;		// javacard/security/KeyBuilder.buildKey(BSZ)Ljavacard/security/Key;
					checkcast 0 219;		// T_CLASSORINTERFACE javacard/security/ECPublicKey
					putfield_a 17;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPublic
					aload_0;
					bspush 12;
					sspush 256;
					sconst_0;
					invokestatic 220;		// javacard/security/KeyBuilder.buildKey(BSZ)Ljavacard/security/Key;
					checkcast 0 82;		// T_CLASSORINTERFACE javacard/security/ECPrivateKey
					putfield_a 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					aload_0;
					bspush 32;
					newarray 11;
					putfield_a 19;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterChainCode
					aload_0;
					bspush 32;
					newarray 11;
					putfield_a 20;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altChainCode
					aload_0;
					getfield_a_this 19;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterChainCode
					putfield_a 21;		// reference CitadelWallet/im/status/keycard/KeycardApplet.chainCode
					aload_0;
					bspush 40;
					newarray 11;
					putfield_a 22;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyPath
					aload_0;
					bspush 40;
					newarray 11;
					putfield_a 23;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pinlessPath
					aload_0;
					bspush 40;
					sconst_1;
					invokestatic 232;		// javacard/framework/JCSystem.makeTransientByteArray(SB)[B
					putfield_a 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					aload_0;
					bspush 32;
					newarray 11;
					putfield_a 25;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyUID
					aload_0;
					invokespecial 100;		// CitadelWallet/im/status/keycard/KeycardApplet.resetCurveParameters()V
					aload_0;
					bspush 33;
					sconst_0;
					invokestatic 91;		// javacard/security/Signature.getInstance(BZ)Ljavacard/security/Signature;
					putfield_a 26;		// reference CitadelWallet/im/status/keycard/KeycardApplet.signature
					aload_0;
					bspush 64;
					sconst_1;
					invokestatic 232;		// javacard/framework/JCSystem.makeTransientByteArray(SB)[B
					putfield_a 27;		// reference CitadelWallet/im/status/keycard/KeycardApplet.derivationOutput
					aload_0;
					sspush 128;
					newarray 11;
					putfield_a 28;		// reference CitadelWallet/im/status/keycard/KeycardApplet.data
					aload_0;
					aload_1;
					sload_2;
					sconst_1;
					sadd;
					aload_1;
					sload_2;
					baload;
					invokevirtual 104;		// register([BSB)V
					return;
		}

		.method public process(Ljavacard/framework/APDU;)V 7 {
			.stack 6;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					ifnonnull L4;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					ifnonnull L3;
				L2:	aload_0;
					new 108;		// CitadelWallet/im/status/keycard/SecureChannel
					dup;
					sconst_5;
					getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a_this 14;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secp256k1
					invokespecial 109;		// CitadelWallet/im/status/keycard/SecureChannel.<init>(BLCitadelWallet/im/status/keycard/Crypto;LCitadelWallet/im/status/keycard/SECP256k1;)V
					putfield_a 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
				L3:	aload_0;
					aload_1;
					invokespecial 110;		// CitadelWallet/im/status/keycard/KeycardApplet.processInit(Ljavacard/framework/APDU;)V
					return;
				L4:	aload_0;
					invokevirtual 111;		// selectingApplet()Z
					ifeq L6;
				L5:	aload_0;
					aload_1;
					invokespecial 112;		// CitadelWallet/im/status/keycard/KeycardApplet.selectApplet(Ljavacard/framework/APDU;)V
					return;
				L6:	aload_1;
					invokevirtual 99;		// setIncomingAndReceive()S
					pop;
					aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L7:	aload_2;
					sconst_1;
					baload;
					slookupswitch L29 20 -64 L22 -63 L23 -62 L24 -54 L25 -48 L17 -47 L18 -46 L19 -45 L20 -44 L21 -30 L26 -14 L13 -3 L27 16 L8 17 L9 18 L10 19 L11 20 L12 32 L14 33 L15 34 L16;
				L8:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					invokevirtual 113;		// openSecureChannel(Ljavacard/framework/APDU;)V
					goto_w L38;
				L9:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					invokevirtual 114;		// mutuallyAuthenticate(Ljavacard/framework/APDU;)V
					goto_w L38;
				L10:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					invokevirtual 115;		// pair(Ljavacard/framework/APDU;)V
					goto_w L38;
				L11:	aload_0;
					aload_1;
					invokespecial 116;		// CitadelWallet/im/status/keycard/KeycardApplet.unpair(Ljavacard/framework/APDU;)V
					goto_w L38;
				L12:	aload_1;
					getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					getfield_a_this 26;		// reference CitadelWallet/im/status/keycard/KeycardApplet.signature
					invokestatic 107;		// CitadelWallet/im/status/keycard/IdentApplet.identifyCard(Ljavacard/framework/APDU;LCitadelWallet/im/status/keycard/SecureChannel;Ljavacard/security/Signature;)V
					goto_w L38;
				L13:	aload_0;
					aload_1;
					invokespecial 117;		// CitadelWallet/im/status/keycard/KeycardApplet.getStatus(Ljavacard/framework/APDU;)V
					goto_w L38;
				L14:	aload_0;
					aload_1;
					invokespecial 118;		// CitadelWallet/im/status/keycard/KeycardApplet.verifyPIN(Ljavacard/framework/APDU;)V
					goto_w L38;
				L15:	aload_0;
					aload_1;
					invokespecial 119;		// CitadelWallet/im/status/keycard/KeycardApplet.changePIN(Ljavacard/framework/APDU;)V
					goto_w L38;
				L16:	aload_0;
					aload_1;
					invokespecial 120;		// CitadelWallet/im/status/keycard/KeycardApplet.unblockPIN(Ljavacard/framework/APDU;)V
					goto L38;
				L17:	aload_0;
					aload_1;
					invokespecial 121;		// CitadelWallet/im/status/keycard/KeycardApplet.loadKey(Ljavacard/framework/APDU;)V
					goto L38;
				L18:	aload_0;
					aload_1;
					invokespecial 122;		// CitadelWallet/im/status/keycard/KeycardApplet.deriveKey(Ljavacard/framework/APDU;)V
					goto L38;
				L19:	aload_0;
					aload_1;
					invokespecial 123;		// CitadelWallet/im/status/keycard/KeycardApplet.generateMnemonic(Ljavacard/framework/APDU;)V
					goto L38;
				L20:	aload_0;
					aload_1;
					invokespecial 124;		// CitadelWallet/im/status/keycard/KeycardApplet.removeKey(Ljavacard/framework/APDU;)V
					goto L38;
				L21:	aload_0;
					aload_1;
					invokespecial 125;		// CitadelWallet/im/status/keycard/KeycardApplet.generateKey(Ljavacard/framework/APDU;)V
					goto L38;
				L22:	aload_0;
					aload_1;
					invokespecial 126;		// CitadelWallet/im/status/keycard/KeycardApplet.sign(Ljavacard/framework/APDU;)V
					goto L38;
				L23:	aload_0;
					aload_1;
					invokespecial 127;		// CitadelWallet/im/status/keycard/KeycardApplet.setPinlessPath(Ljavacard/framework/APDU;)V
					goto L38;
				L24:	aload_0;
					aload_1;
					invokespecial 128;		// CitadelWallet/im/status/keycard/KeycardApplet.exportKey(Ljavacard/framework/APDU;)V
					goto L38;
				L25:	aload_0;
					aload_1;
					invokespecial 129;		// CitadelWallet/im/status/keycard/KeycardApplet.getData(Ljavacard/framework/APDU;)V
					goto L38;
				L26:	aload_0;
					aload_1;
					invokespecial 130;		// CitadelWallet/im/status/keycard/KeycardApplet.storeData(Ljavacard/framework/APDU;)V
					goto L38;
				L27:	aload_0;
					aload_1;
					invokespecial 131;		// CitadelWallet/im/status/keycard/KeycardApplet.factoryReset(Ljavacard/framework/APDU;)V
				L28:	return;
				L29:	sspush 27904;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L30:	goto L38;
				L31:	astore_3;
				L32:	aload_0;
					aload_1;
					aload_3;
					invokevirtual 132;		// getReason()S
					invokespecial 133;		// CitadelWallet/im/status/keycard/KeycardApplet.handleException(Ljavacard/framework/APDU;S)V
				L33:	goto L38;
				L34:	astore_3;
				L35:	aload_0;
					aload_1;
					sspush 28416;
					aload_3;
					invokevirtual 143;		// getReason()S
					sor;
					invokespecial 133;		// CitadelWallet/im/status/keycard/KeycardApplet.handleException(Ljavacard/framework/APDU;S)V
				L36:	goto L38;
				L37:	pop;
					aload_0;
					aload_1;
					sspush 28416;
					invokespecial 133;		// CitadelWallet/im/status/keycard/KeycardApplet.handleException(Ljavacard/framework/APDU;S)V
				L38:	aload_0;
					aload_1;
					invokespecial 134;		// CitadelWallet/im/status/keycard/KeycardApplet.shouldRespond(Ljavacard/framework/APDU;)Z
					ifeq L40;
				L39:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					sconst_0;
					sspush -28672;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
				L40:	return;
			.exceptionTable {
				// start_block end_block handler_block catch_type_index
				L7 L28 L31 105;
				L29 L30 L31 105;
				L7 L28 L34 97;
				L29 L30 L34 97;
				L7 L28 L37 98;
				L29 L30 L37 98;
			}
		}

		.method private handleException(Ljavacard/framework/APDU;S)V {
			.stack 4;
			.locals 0;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_0;
					aload_1;
					invokespecial 134;		// CitadelWallet/im/status/keycard/KeycardApplet.shouldRespond(Ljavacard/framework/APDU;)Z
					ifeq L3;
				L1:	sload_2;
					sspush 27010;
					if_scmpeq L3;
				L2:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					sconst_0;
					sload_2;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
					goto L4;
				L3:	sload_2;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L4:	return;
		}

		.method private processInit(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 7;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	aload_1;
					invokevirtual 99;		// setIncomingAndReceive()S
					pop;
					aload_0;
					invokevirtual 111;		// selectingApplet()Z
					ifeq L3;
				L2:	aload_2;
					sconst_0;
					bspush -128;
					bastore;
					aload_2;
					sconst_1;
					getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					sconst_2;
					invokevirtual 135;		// copyPublicKey([BS)S
					s2b;
					bastore;
					aload_1;
					sconst_0;
					aload_2;
					sconst_1;
					baload;
					sconst_2;
					sadd;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
					goto_w L30;
				L3:	aload_2;
					sconst_1;
					baload;
					bspush -2;
					if_scmpne_w L27;
				L4:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 136;		// oneShotDecrypt([B)V
					bspush 50;
					sstore_3;
				L5:	sload_3;
					sconst_2;
					sadd;
					s2b;
					sstore 4;
				L6:	sload 4;
					bspush 6;
					sadd;
					s2b;
					sstore 5;
				L7:	aload_2;
					sconst_4;
					baload;
					sload_3;
					if_scmpeq L10;
				L8:	aload_2;
					sconst_4;
					baload;
					sload 4;
					if_scmpeq L10;
				L9:	aload_2;
					sconst_4;
					baload;
					sload 5;
					if_scmpne L11;
				L10:	aload_0;
					aload_2;
					sconst_5;
					bspush 18;
					invokespecial 137;		// CitadelWallet/im/status/keycard/KeycardApplet.allDigits([BSS)Z
					ifne L12;
				L11:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L12:	bspush 11;
					sstore 8;
				L13:	aload_2;
					sconst_4;
					baload;
					sload 4;
					if_scmplt L23;
				L14:	aload_2;
					sconst_5;
					sload_3;
					sadd;
					baload;
					sstore 6;
				L15:	aload_2;
					sconst_5;
					sload_3;
					sadd;
					sconst_1;
					sadd;
					baload;
					sstore 7;
				L16:	sload 6;
					sconst_2;
					if_scmplt L20;
				L17:	sload 6;
					bspush 10;
					if_scmpgt L20;
				L18:	sload 7;
					sconst_3;
					if_scmplt L20;
				L19:	sload 7;
					bspush 12;
					if_scmple L21;
				L20:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L21:	aload_2;
					sconst_4;
					baload;
					sload 5;
					if_scmpne L25;
				L22:	sconst_5;
					sload 4;
					sadd;
					sstore 8;
					goto L25;
				L23:	sconst_3;
					sstore 6;
				L24:	sconst_5;
					sstore 7;
				L25:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					bspush 23;
					invokevirtual 138;		// initSecureChannel([BS)V
					aload_0;
					new 139;		// javacard/framework/OwnerPIN
					dup;
					sload 6;
					bspush 6;
					invokespecial 140;		// javacard/framework/OwnerPIN.<init>(BB)V
					putfield_a 31;		// reference CitadelWallet/im/status/keycard/KeycardApplet.mainPIN
					getfield_a_this 31;		// reference CitadelWallet/im/status/keycard/KeycardApplet.mainPIN
					aload_2;
					sconst_5;
					bspush 6;
					invokevirtual 142;		// update([BSB)V
					aload_0;
					new 139;		// javacard/framework/OwnerPIN
					dup;
					sload 6;
					bspush 6;
					invokespecial 140;		// javacard/framework/OwnerPIN.<init>(BB)V
					putfield_a 32;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altPIN
					getfield_a_this 32;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altPIN
					aload_2;
					sload 8;
					bspush 6;
					invokevirtual 142;		// update([BSB)V
					aload_0;
					new 139;		// javacard/framework/OwnerPIN
					dup;
					sload 7;
					bspush 12;
					invokespecial 140;		// javacard/framework/OwnerPIN.<init>(BB)V
					putfield_a 33;		// reference CitadelWallet/im/status/keycard/KeycardApplet.puk
					getfield_a_this 33;		// reference CitadelWallet/im/status/keycard/KeycardApplet.puk
					aload_2;
					bspush 11;
					bspush 12;
					invokevirtual 142;		// update([BSB)V
					aload_0;
					getfield_a_this 31;		// reference CitadelWallet/im/status/keycard/KeycardApplet.mainPIN
					putfield_a 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
				L26:	goto L30;
				L27:	aload_2;
					sconst_1;
					baload;
					bspush 20;
					if_scmpne L29;
				L28:	aload_1;
					aconst_null;
					getfield_a_this 26;		// reference CitadelWallet/im/status/keycard/KeycardApplet.signature
					invokestatic 107;		// CitadelWallet/im/status/keycard/IdentApplet.identifyCard(Ljavacard/framework/APDU;LCitadelWallet/im/status/keycard/SecureChannel;Ljavacard/security/Signature;)V
					goto L30;
				L29:	sspush 27904;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L30:	return;
		}

		.method private shouldRespond(Ljavacard/framework/APDU;)Z {
			.stack 2;
			.locals 0;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					invokevirtual 77;		// isOpen()Z
					ifeq L3;
				L1:	aload_1;
					invokevirtual 145;		// getCurrentState()B
					bspush 6;
					if_scmpeq L3;
				L2:	sconst_1;
					sreturn;
				L3:	sconst_0;
					sreturn;
		}

		.method private unpair(Ljavacard/framework/APDU;)V {
			.stack 2;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					pop;
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 146;		// isValidated()Z
					ifeq L3;
				L2:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 147;		// unpair([B)V
					goto L4;
				L3:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L4:	return;
		}

		.method private selectApplet(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 4;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	getfield_a_this 32;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altPIN
					invokevirtual 148;		// reset()V
					getfield_a_this 31;		// reference CitadelWallet/im/status/keycard/KeycardApplet.mainPIN
					invokevirtual 148;		// reset()V
					getfield_a_this 33;		// reference CitadelWallet/im/status/keycard/KeycardApplet.puk
					invokevirtual 148;		// reset()V
					getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					invokevirtual 149;		// reset()V
					aload_0;
					getfield_a_this 31;		// reference CitadelWallet/im/status/keycard/KeycardApplet.mainPIN
					putfield_a 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	sconst_0;
					sstore_3;
				L2:	aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush -92;
					bastore;
					getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					invokeinterface 1 82 3;		// javacard/security/ECPrivateKey
					ifeq L4;
				L3:	aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush -127;
					bastore;
				L4:	sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sstore 4;
				L5:	aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush -113;
					bastore;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush 16;
					bastore;
					getfield_a_this 16;		// reference CitadelWallet/im/status/keycard/KeycardApplet.uid
					sconst_0;
					aload_2;
					sload_3;
					bspush 16;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					sinc 3 16;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush -128;
					bastore;
					getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					sload_3;
					sconst_1;
					sadd;
					invokevirtual 135;		// copyPublicKey([BS)S
					sstore 5;
				L6:	aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sload 5;
					s2b;
					bastore;
					sload_3;
					sload 5;
					sadd;
					sstore_3;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sconst_2;
					bastore;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sconst_2;
					bastore;
					aload_2;
					sload_3;
					sspush 769;
					invokestatic 144;		// javacard/framework/Util.setShort([BSS)S
					pop;
					sinc 3 2;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sconst_2;
					bastore;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sconst_1;
					bastore;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					invokevirtual 150;		// getRemainingPairingSlots()B
					bastore;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush -114;
					bastore;
					getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					invokeinterface 1 82 3;		// javacard/security/ECPrivateKey
					ifeq L8;
				L7:	aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush 32;
					bastore;
					getfield_a_this 25;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyUID
					sconst_0;
					aload_2;
					sload_3;
					bspush 32;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					sinc 3 32;
					goto L9;
				L8:	aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sconst_0;
					bastore;
				L9:	aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush -115;
					bastore;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					sconst_1;
					bastore;
					aload_2;
					sload_3;
					dup;
					sconst_1;
					sadd;
					sstore_3;
					bspush 31;
					bastore;
					aload_2;
					sload 4;
					sload_3;
					sload 4;
					ssub;
					sconst_1;
					ssub;
					s2b;
					bastore;
					aload_1;
					sconst_0;
					sload_3;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
					return;
		}

		.method private getStatus(Ljavacard/framework/APDU;)V {
			.stack 4;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					pop;
					aload_2;
					sconst_2;
					baload;
					ifne L4;
				L2:	aload_0;
					aload_2;
					bspush 37;
					invokespecial 151;		// CitadelWallet/im/status/keycard/KeycardApplet.getApplicationStatus([BS)S
					sstore_3;
				L3:	goto L8;
				L4:	aload_2;
					sconst_2;
					baload;
					sconst_1;
					if_scmpne L7;
				L5:	aload_0;
					aload_2;
					bspush 37;
					invokespecial 152;		// CitadelWallet/im/status/keycard/KeycardApplet.getKeyStatus([BS)S
					sstore_3;
				L6:	goto L8;
				L7:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L8:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					sload_3;
					sspush -28672;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
					return;
		}

		.method private getApplicationStatus([BS)S {
			.stack 4;
			.locals 0;

				L0:	aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					bspush -93;
					bastore;
					aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					bspush 9;
					bastore;
					aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					sconst_2;
					bastore;
					aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					sconst_1;
					bastore;
					aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 153;		// getTriesRemaining()B
					bastore;
					aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					sconst_2;
					bastore;
					aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					sconst_1;
					bastore;
					aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					getfield_a_this 33;		// reference CitadelWallet/im/status/keycard/KeycardApplet.puk
					invokevirtual 153;		// getTriesRemaining()B
					bastore;
					aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					sconst_1;
					bastore;
					aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					sconst_1;
					bastore;
					aload_1;
					sload_2;
					dup;
					sconst_1;
					sadd;
					sstore_2;
					getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					invokeinterface 1 82 3;		// javacard/security/ECPrivateKey
					ifeq L2;
				L1:	sconst_m1;
					goto L3;
				L2:	sconst_0;
				L3:	bastore;
					sload_2;
					bspush 37;
					ssub;
					sreturn;
		}

		.method private getKeyStatus([BS)S {
			.stack 5;
			.locals 0;

				L0:	getfield_a_this 22;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyPath
					sconst_0;
					aload_1;
					sload_2;
					getfield_s_this 34;		// short CitadelWallet/im/status/keycard/KeycardApplet.keyPathLen
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					getfield_s_this 34;		// short CitadelWallet/im/status/keycard/KeycardApplet.keyPathLen
					sreturn;
		}

		.method private verifyPIN(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 3;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					s2b;
					sstore_3;
				L2:	sload_3;
					bspush 6;
					if_scmpne L4;
				L3:	aload_0;
					aload_2;
					sconst_5;
					sload_3;
					invokespecial 137;		// CitadelWallet/im/status/keycard/KeycardApplet.allDigits([BSS)Z
					ifne L5;
				L4:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L5:	getfield_a_this 31;		// reference CitadelWallet/im/status/keycard/KeycardApplet.mainPIN
					aload_2;
					sconst_5;
					sload_3;
					invokevirtual 155;		// check([BSB)Z
					ifeq L7;
				L6:	sconst_1;
					goto L8;
				L7:	sconst_0;
				L8:	sstore 4;
				L9:	sload 4;
					getfield_a_this 32;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altPIN
					aload_2;
					sconst_5;
					sload_3;
					invokevirtual 155;		// check([BSB)Z
					ifeq L11;
				L10:	sconst_2;
					goto L12;
				L11:	sconst_0;
				L12:	sadd;
					sstore 4;
					sload 4;
					stableswitch L16 0 3 L13 L14 L15 L15;
				L13:	sspush 25536;
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 153;		// getTriesRemaining()B
					sor;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					goto L16;
				L14:	aload_0;
					getfield_a_this 19;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterChainCode
					putfield_a 21;		// reference CitadelWallet/im/status/keycard/KeycardApplet.chainCode
					getfield_a_this 32;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altPIN
					invokevirtual 156;		// resetAndUnblock()V
					aload_0;
					getfield_a_this 31;		// reference CitadelWallet/im/status/keycard/KeycardApplet.mainPIN
					putfield_a 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					goto L16;
				L15:	aload_0;
					getfield_a_this 20;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altChainCode
					putfield_a 21;		// reference CitadelWallet/im/status/keycard/KeycardApplet.chainCode
					getfield_a_this 31;		// reference CitadelWallet/im/status/keycard/KeycardApplet.mainPIN
					invokevirtual 156;		// resetAndUnblock()V
					aload_0;
					getfield_a_this 32;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altPIN
					putfield_a 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
				L16:	return;
		}

		.method private changePIN(Ljavacard/framework/APDU;)V {
			.stack 3;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					s2b;
					sstore_3;
				L2:	getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 146;		// isValidated()Z
					ifne L4;
				L3:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L4:	aload_2;
					sconst_2;
					baload;
					stableswitch L8 0 2 L5 L6 L7;
				L5:	aload_0;
					aload_2;
					sload_3;
					invokespecial 157;		// CitadelWallet/im/status/keycard/KeycardApplet.changeUserPIN([BB)V
					goto L9;
				L6:	aload_0;
					aload_2;
					sload_3;
					invokespecial 158;		// CitadelWallet/im/status/keycard/KeycardApplet.changePUK([BB)V
					goto L9;
				L7:	aload_0;
					aload_2;
					sload_3;
					invokespecial 159;		// CitadelWallet/im/status/keycard/KeycardApplet.changePairingSecret([BB)V
					goto L9;
				L8:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L9:	return;
		}

		.method private changeUserPIN([BB)V {
			.stack 4;
			.locals 0;

				L0:	sload_2;
					bspush 6;
					if_scmpne L2;
				L1:	aload_0;
					aload_1;
					sconst_5;
					sload_2;
					invokespecial 137;		// CitadelWallet/im/status/keycard/KeycardApplet.allDigits([BSS)Z
					ifne L3;
				L2:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L3:	getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					aload_1;
					sconst_5;
					sload_2;
					invokevirtual 142;		// update([BSB)V
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					aload_1;
					sconst_5;
					sload_2;
					invokevirtual 155;		// check([BSB)Z
					pop;
					return;
		}

		.method private changePUK([BB)V {
			.stack 4;
			.locals 0;

				L0:	sload_2;
					bspush 12;
					if_scmpne L2;
				L1:	aload_0;
					aload_1;
					sconst_5;
					sload_2;
					invokespecial 137;		// CitadelWallet/im/status/keycard/KeycardApplet.allDigits([BSS)Z
					ifne L3;
				L2:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L3:	getfield_a_this 33;		// reference CitadelWallet/im/status/keycard/KeycardApplet.puk
					aload_1;
					sconst_5;
					sload_2;
					invokevirtual 142;		// update([BSB)V
					return;
		}

		.method private changePairingSecret([BB)V {
			.stack 3;
			.locals 0;

				L0:	sload_2;
					bspush 32;
					if_scmpeq L2;
				L1:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L2:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					sconst_5;
					invokevirtual 160;		// updatePairingSecret([BB)V
					return;
		}

		.method private unblockPIN(Ljavacard/framework/APDU;)V {
			.stack 4;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					s2b;
					sstore_3;
				L2:	getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 153;		// getTriesRemaining()B
					ifeq L4;
				L3:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L4:	sload_3;
					bspush 18;
					if_scmpne L6;
				L5:	aload_0;
					aload_2;
					sconst_5;
					sload_3;
					invokespecial 137;		// CitadelWallet/im/status/keycard/KeycardApplet.allDigits([BSS)Z
					ifne L7;
				L6:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L7:	getfield_a_this 33;		// reference CitadelWallet/im/status/keycard/KeycardApplet.puk
					aload_2;
					sconst_5;
					bspush 12;
					invokevirtual 155;		// check([BSB)Z
					ifne L9;
				L8:	sspush 25536;
					getfield_a_this 33;		// reference CitadelWallet/im/status/keycard/KeycardApplet.puk
					invokevirtual 153;		// getTriesRemaining()B
					sor;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L9:	getfield_a_this 32;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altPIN
					invokevirtual 156;		// resetAndUnblock()V
					getfield_a_this 31;		// reference CitadelWallet/im/status/keycard/KeycardApplet.mainPIN
					invokevirtual 156;		// resetAndUnblock()V
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					aload_2;
					bspush 17;
					bspush 6;
					invokevirtual 142;		// update([BSB)V
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					aload_2;
					bspush 17;
					bspush 6;
					invokevirtual 155;		// check([BSB)Z
					pop;
					getfield_a_this 33;		// reference CitadelWallet/im/status/keycard/KeycardApplet.puk
					invokevirtual 148;		// reset()V
					return;
		}

		.method private loadKey(Ljavacard/framework/APDU;)V {
			.stack 3;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					pop;
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 146;		// isValidated()Z
					ifne L3;
				L2:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L3:	aload_2;
					sconst_2;
					baload;
					stableswitch L6 1 3 L4 L4 L5;
				L4:	aload_0;
					aload_2;
					invokespecial 161;		// CitadelWallet/im/status/keycard/KeycardApplet.loadKeyPair([B)V
					goto L7;
				L5:	aload_0;
					aload_2;
					invokespecial 162;		// CitadelWallet/im/status/keycard/KeycardApplet.loadSeed([B)V
					goto L7;
				L6:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L7:	aload_0;
					sconst_0;
					putfield_s 35;		// short CitadelWallet/im/status/keycard/KeycardApplet.pinlessPathLen
					aload_0;
					aload_1;
					aload_2;
					invokespecial 164;		// CitadelWallet/im/status/keycard/KeycardApplet.generateKeyUIDAndRespond(Ljavacard/framework/APDU;[B)V
					return;
		}

		.method private generateKeyUIDAndRespond(Ljavacard/framework/APDU;[B)V {
			.stack 6;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	getfield_b_this 36;		// boolean CitadelWallet/im/status/keycard/KeycardApplet.isExtended
					ifeq L2;
				L1:	getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a 6;		// reference CitadelWallet/im/status/keycard/Crypto.sha256
					getfield_a_this 19;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterChainCode
					sconst_0;
					bspush 32;
					getfield_a_this 20;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altChainCode
					sconst_0;
					invokevirtual 67;		// doFinal([BSS[BS)S
					pop;
				L2:	getfield_a_this 17;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPublic
					aload_2;
					sconst_0;
					invokeinterface 3 219 19;		// javacard/security/ECPublicKey
					sstore_3;
				L3:	getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a 6;		// reference CitadelWallet/im/status/keycard/Crypto.sha256
					aload_2;
					sconst_0;
					sload_3;
					getfield_a_this 25;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyUID
					sconst_0;
					invokevirtual 67;		// doFinal([BSS[BS)S
					pop;
					getfield_a_this 25;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyUID
					sconst_0;
					aload_2;
					bspush 37;
					bspush 32;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					bspush 32;
					sspush -28672;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
					return;
		}

		.method private resetKeyStatus()V {
			.stack 2;
			.locals 0;

				L0:	aload_0;
					sconst_0;
					putfield_s 34;		// short CitadelWallet/im/status/keycard/KeycardApplet.keyPathLen
					return;
		}

		.method private loadKeyPair([B)V {
			.stack 7;
			.locals 4;

				L0:	sconst_5;
					aload_1;
					bspush 6;
					baload;
					bspush -127;
					if_scmpne L2;
				L1:	sconst_3;
					goto L3;
				L2:	sconst_2;
				L3:	sadd;
					sstore_2;
				L4:	sload_2;
					aload_1;
					sload_2;
					sconst_1;
					sadd;
					baload;
					sadd;
					sconst_2;
					sadd;
					sstore_3;
				L5:	sload_3;
					aload_1;
					sload_3;
					sconst_1;
					sadd;
					baload;
					sadd;
					sconst_2;
					sadd;
					sstore 4;
				L6:	aload_1;
					sload_2;
					baload;
					bspush -128;
					if_scmpeq L8;
				L7:	sload_3;
					sstore 4;
					sload_2;
					sstore_3;
					sconst_m1;
					sstore_2;
				L8:	aload_1;
					sconst_5;
					baload;
					bspush -95;
					if_scmpne L10;
				L9:	aload_1;
					sload_3;
					baload;
					bspush -127;
					if_scmpeq L11;
				L10:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L11:	invokestatic 166;		// javacard/framework/JCSystem.beginTransaction()V
				L12:	aload_0;
					aload_1;
					sload 4;
					baload;
					bspush -126;
					if_scmpne L14;
				L13:	sconst_1;
					goto L15;
				L14:	sconst_0;
				L15:	putfield_b 36;		// boolean CitadelWallet/im/status/keycard/KeycardApplet.isExtended
					getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					aload_1;
					sload_3;
					sconst_2;
					sadd;
					aload_1;
					sload_3;
					sconst_1;
					sadd;
					baload;
					invokeinterface 4 82 18;		// javacard/security/ECPrivateKey
					getfield_b_this 36;		// boolean CitadelWallet/im/status/keycard/KeycardApplet.isExtended
					ifeq L19;
				L16:	aload_1;
					sload 4;
					sconst_1;
					sadd;
					baload;
					bspush 32;
					if_scmpne L18;
				L17:	aload_1;
					sload 4;
					sconst_2;
					sadd;
					getfield_a_this 19;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterChainCode
					sconst_0;
					aload_1;
					sload 4;
					sconst_1;
					sadd;
					baload;
					invokestatic 167;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					goto L19;
				L18:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L19:	sload_2;
					sconst_m1;
					if_scmpeq L22;
				L20:	aload_1;
					sload_2;
					sconst_1;
					sadd;
					baload;
					sstore 5;
				L21:	sinc 2 2;
					goto L23;
				L22:	sconst_0;
					sstore_2;
					getfield_a_this 14;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secp256k1
					getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					aload_1;
					sload_2;
					invokevirtual 168;		// derivePublicKey(Ljavacard/security/ECPrivateKey;[BS)S
					sstore 5;
				L23:	getfield_a_this 17;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPublic
					aload_1;
					sload_2;
					sload 5;
					invokeinterface 4 219 18;		// javacard/security/ECPublicKey
				L24:	goto L26;
				L25:	pop;
					sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L26:	aload_0;
					invokespecial 169;		// CitadelWallet/im/status/keycard/KeycardApplet.resetKeyStatus()V
					invokestatic 170;		// javacard/framework/JCSystem.commitTransaction()V
					return;
			.exceptionTable {
				// start_block end_block handler_block catch_type_index
				L12 L24 L25 97;
			}
		}

		.method private loadSeed([B)V {
			.stack 6;
			.locals 1;

				L0:	aload_1;
					sconst_4;
					baload;
					bspush 64;
					if_scmpeq L2;
				L1:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L2:	getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					aload_1;
					sconst_5;
					bspush 64;
					aload_1;
					sconst_5;
					invokevirtual 171;		// bip32MasterFromSeed([BSS[BS)V
					invokestatic 166;		// javacard/framework/JCSystem.beginTransaction()V
					aload_0;
					sconst_1;
					putfield_b 36;		// boolean CitadelWallet/im/status/keycard/KeycardApplet.isExtended
					getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					aload_1;
					sconst_5;
					bspush 32;
					invokeinterface 4 82 18;		// javacard/security/ECPrivateKey
					aload_1;
					bspush 37;
					getfield_a_this 19;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterChainCode
					sconst_0;
					bspush 32;
					invokestatic 167;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					getfield_a_this 14;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secp256k1
					getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					aload_1;
					sconst_0;
					invokevirtual 168;		// derivePublicKey(Ljavacard/security/ECPrivateKey;[BS)S
					sstore_2;
				L3:	getfield_a_this 17;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPublic
					aload_1;
					sconst_0;
					sload_2;
					invokeinterface 4 219 18;		// javacard/security/ECPublicKey
					aload_0;
					invokespecial 169;		// CitadelWallet/im/status/keycard/KeycardApplet.resetKeyStatus()V
					invokestatic 170;		// javacard/framework/JCSystem.commitTransaction()V
					return;
		}

		.method private deriveKey(Ljavacard/framework/APDU;)V {
			.stack 6;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					sstore_3;
				L2:	getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 146;		// isValidated()Z
					ifne L4;
				L3:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L4:	aload_0;
					aload_2;
					sconst_0;
					sload_3;
					aload_2;
					sconst_2;
					baload;
					invokespecial 172;		// CitadelWallet/im/status/keycard/KeycardApplet.updateDerivationPath([BSSB)V
					aload_0;
					invokevirtual 173;		// commitTmpPath()V
					return;
		}

		.method private updateDerivationPath([BSSB)V {
			.stack 5;
			.locals 4;

				L0:	getfield_b_this 36;		// boolean CitadelWallet/im/status/keycard/KeycardApplet.isExtended
					ifne L5;
				L1:	sload_3;
					ifne L3;
				L2:	aload_0;
					sconst_0;
					putfield_s 37;		// short CitadelWallet/im/status/keycard/KeycardApplet.tmpPathLen
					goto L4;
				L3:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L4:	return;
				L5:	getfield_a_this 22;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyPath
					astore 7;
				L6:	sload 4;
					slookupswitch L23 4 -128 L15 -64 L18 0 L7 64 L10;
				L7:	sload_3;
					sstore 5;
				L8:	sconst_0;
					sstore 6;
				L9:	goto L24;
				L10:	getfield_s_this 34;		// short CitadelWallet/im/status/keycard/KeycardApplet.keyPathLen
					sconst_4;
					if_scmpge L12;
				L11:	sspush 27392;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L12:	getfield_s_this 34;		// short CitadelWallet/im/status/keycard/KeycardApplet.keyPathLen
					sload_3;
					sadd;
					sconst_4;
					ssub;
					sstore 5;
				L13:	getfield_s_this 34;		// short CitadelWallet/im/status/keycard/KeycardApplet.keyPathLen
					sconst_4;
					ssub;
					sstore 6;
				L14:	goto L24;
				L15:	getfield_s_this 34;		// short CitadelWallet/im/status/keycard/KeycardApplet.keyPathLen
					sload_3;
					sadd;
					sstore 5;
				L16:	getfield_s_this 34;		// short CitadelWallet/im/status/keycard/KeycardApplet.keyPathLen
					sstore 6;
				L17:	goto L24;
				L18:	sload_3;
					ifeq L20;
				L19:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L20:	getfield_a_this 23;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pinlessPath
					astore 7;
					getfield_s_this 35;		// short CitadelWallet/im/status/keycard/KeycardApplet.pinlessPathLen
					sstore 5;
				L21:	getfield_s_this 35;		// short CitadelWallet/im/status/keycard/KeycardApplet.pinlessPathLen
					sstore 6;
				L22:	goto L24;
				L23:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L24:	sload_3;
					sconst_4;
					srem;
					ifne L26;
				L25:	sload 5;
					getfield_a_this 22;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyPath
					arraylength;
					if_scmple L27;
				L26:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L27:	sconst_5;
					sload_2;
					sadd;
					sstore 8;
				L28:	aload 7;
					sconst_0;
					getfield_a_this 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					sconst_0;
					sload 6;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					aload_1;
					sload 8;
					getfield_a_this 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					sload 6;
					sload_3;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					aload_0;
					sload 5;
					putfield_s 37;		// short CitadelWallet/im/status/keycard/KeycardApplet.tmpPathLen
					return;
		}

		.method  commitTmpPath()V 128 {
			.stack 5;
			.locals 0;

				L0:	invokestatic 166;		// javacard/framework/JCSystem.beginTransaction()V
					getfield_a_this 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					sconst_0;
					getfield_a_this 22;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyPath
					sconst_0;
					getfield_s_this 37;		// short CitadelWallet/im/status/keycard/KeycardApplet.tmpPathLen
					invokestatic 167;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					aload_0;
					getfield_s_this 37;		// short CitadelWallet/im/status/keycard/KeycardApplet.tmpPathLen
					putfield_s 34;		// short CitadelWallet/im/status/keycard/KeycardApplet.keyPathLen
					invokestatic 170;		// javacard/framework/JCSystem.commitTransaction()V
					return;
		}

		.method private doDerive([BS)V {
			.stack 9;
			.locals 4;

				L0:	getfield_s_this 37;		// short CitadelWallet/im/status/keycard/KeycardApplet.tmpPathLen
					ifne L2;
				L1:	getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					getfield_a_this 27;		// reference CitadelWallet/im/status/keycard/KeycardApplet.derivationOutput
					sconst_0;
					invokeinterface 3 82 19;		// javacard/security/ECPrivateKey
					pop;
					return;
				L2:	sconst_5;
					sload_2;
					sadd;
					sstore_3;
				L3:	sload_3;
					bspush 37;
					sadd;
					sstore 4;
				L4:	sload 4;
					getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					aload_1;
					sload 4;
					invokeinterface 3 82 19;		// javacard/security/ECPrivateKey
					sadd;
					sstore 5;
				L5:	getfield_a_this 21;		// reference CitadelWallet/im/status/keycard/KeycardApplet.chainCode
					sconst_0;
					aload_1;
					sload 5;
					bspush 32;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					sstore 5;
					getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a_this 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					sconst_0;
					invokevirtual 236;		// bip32IsHardened([BS)Z
					ifne L7;
				L6:	getfield_a_this 17;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPublic
					aload_1;
					sload 5;
					invokeinterface 3 219 19;		// javacard/security/ECPublicKey
					pop;
					goto L8;
				L7:	aload_1;
					sload 5;
					sconst_0;
					bastore;
				L8:	sconst_0;
					sstore 6;
				L9:	goto L17;
				L10:	sload 6;
					ifle L14;
				L11:	getfield_a_this 27;		// reference CitadelWallet/im/status/keycard/KeycardApplet.derivationOutput
					sconst_0;
					aload_1;
					sload 4;
					bspush 64;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a_this 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					sload 6;
					invokevirtual 236;		// bip32IsHardened([BS)Z
					ifne L13;
				L12:	getfield_a_this 14;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secp256k1
					aload_1;
					sload 4;
					aload_1;
					sload 5;
					invokevirtual 175;		// derivePublicKey([BS[BS)S
					pop;
					goto L14;
				L13:	aload_1;
					sload 5;
					sconst_0;
					bastore;
				L14:	getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a_this 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					sload 6;
					aload_1;
					sload_3;
					aload_1;
					sload 4;
					getfield_a_this 27;		// reference CitadelWallet/im/status/keycard/KeycardApplet.derivationOutput
					sconst_0;
					invokevirtual 176;		// bip32CKDPriv([BS[BS[BS[BS)Z
					ifne L16;
				L15:	sspush 27012;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L16:	sinc 6 4;
				L17:	sload 6;
					getfield_s_this 37;		// short CitadelWallet/im/status/keycard/KeycardApplet.tmpPathLen
					if_scmplt L10;
				L18:	return;
		}

		.method private generateMnemonic(Ljavacard/framework/APDU;)V {
			.stack 7;
			.locals 8;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					pop;
					aload_2;
					sconst_2;
					baload;
					sstore_3;
				L2:	sload_3;
					sconst_4;
					if_scmplt L4;
				L3:	sload_3;
					bspush 8;
					if_scmple L5;
				L4:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L5:	sload_3;
					sconst_4;
					smul;
					sstore 4;
				L6:	getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a 5;		// reference CitadelWallet/im/status/keycard/Crypto.random
					aload_2;
					bspush 85;
					sload 4;
					invokevirtual 90;		// generateData([BSS)V
					getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a 6;		// reference CitadelWallet/im/status/keycard/Crypto.sha256
					aload_2;
					bspush 85;
					sload 4;
					aload_2;
					bspush 85;
					sload 4;
					sadd;
					invokevirtual 67;		// doFinal([BSS[BS)S
					pop;
					sinc 4 86;
					bspush 37;
					sstore 5;
				L7:	sconst_0;
					sstore 6;
				L8:	sconst_0;
					sstore 7;
				L9:	bspush 85;
					sstore 8;
				L10:	goto L15;
				L11:	aload_2;
					sload 8;
					invokestatic 177;		// javacard/framework/Util.getShort([BS)S
					sstore 9;
				L12:	aload_2;
					sload 5;
					aload_0;
					sload 7;
					aload_0;
					sload 9;
					sload 6;
					invokespecial 178;		// CitadelWallet/im/status/keycard/KeycardApplet.logicrShift(SS)S
					sor;
					sconst_5;
					invokespecial 178;		// CitadelWallet/im/status/keycard/KeycardApplet.logicrShift(SS)S
					invokestatic 144;		// javacard/framework/Util.setShort([BSS)S
					pop;
					sinc 5 2;
					sinc 6 5;
					sload 9;
					bspush 16;
					sload 6;
					ssub;
					sshl;
					sstore 7;
					sload 6;
					bspush 11;
					if_scmplt L14;
				L13:	aload_2;
					sload 5;
					aload_0;
					sload 7;
					sconst_5;
					invokespecial 178;		// CitadelWallet/im/status/keycard/KeycardApplet.logicrShift(SS)S
					invokestatic 144;		// javacard/framework/Util.setShort([BSS)S
					pop;
					sinc 5 2;
					sinc 6 -11;
					sload 9;
					bspush 16;
					sload 6;
					ssub;
					sshl;
					sstore 7;
				L14:	sinc 8 2;
				L15:	sload 8;
					sload 4;
					if_scmplt L11;
				L16:	sload_3;
					bspush 6;
					if_scmpge L18;
				L17:	sinc 5 -2;
				L18:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					sload 5;
					bspush 37;
					ssub;
					sspush -28672;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
					return;
		}

		.method private logicrShift(SS)S {
			.stack 3;
			.locals 1;

				L0:	sload_2;
					ifne L2;
				L1:	sload_1;
					sreturn;
				L2:	sload_1;
					sspush 32767;
					sand;
					sstore_3;
				L3:	sload_3;
					sload_1;
					if_scmpne L5;
				L4:	sload_1;
					sload_2;
					sushr;
					sreturn;
				L5:	sload_3;
					sload_2;
					sushr;
					sstore_3;
					sspush 16384;
					sload_2;
					sconst_1;
					ssub;
					sushr;
					sload_3;
					sor;
					sreturn;
		}

		.method private clearKeys()V {
			.stack 4;
			.locals 0;

				L0:	aload_0;
					sconst_0;
					putfield_s 34;		// short CitadelWallet/im/status/keycard/KeycardApplet.keyPathLen
					aload_0;
					sconst_0;
					putfield_s 35;		// short CitadelWallet/im/status/keycard/KeycardApplet.pinlessPathLen
					aload_0;
					sconst_0;
					putfield_s 37;		// short CitadelWallet/im/status/keycard/KeycardApplet.tmpPathLen
					aload_0;
					sconst_0;
					putfield_b 36;		// boolean CitadelWallet/im/status/keycard/KeycardApplet.isExtended
					getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					invokeinterface 1 82 0;		// javacard/security/ECPrivateKey
					getfield_a_this 17;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPublic
					invokeinterface 1 219 0;		// javacard/security/ECPublicKey
					aload_0;
					invokespecial 100;		// CitadelWallet/im/status/keycard/KeycardApplet.resetCurveParameters()V
					getfield_a_this 19;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterChainCode
					sconst_0;
					getfield_a_this 19;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterChainCode
					arraylength;
					sconst_0;
					invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					getfield_a_this 20;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altChainCode
					sconst_0;
					getfield_a_this 20;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altChainCode
					arraylength;
					sconst_0;
					invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					getfield_a_this 22;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyPath
					sconst_0;
					getfield_a_this 22;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyPath
					arraylength;
					sconst_0;
					invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					getfield_a_this 23;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pinlessPath
					sconst_0;
					getfield_a_this 23;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pinlessPath
					arraylength;
					sconst_0;
					invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					getfield_a_this 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					sconst_0;
					getfield_a_this 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					arraylength;
					sconst_0;
					invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					getfield_a_this 27;		// reference CitadelWallet/im/status/keycard/KeycardApplet.derivationOutput
					sconst_0;
					getfield_a_this 27;		// reference CitadelWallet/im/status/keycard/KeycardApplet.derivationOutput
					arraylength;
					sconst_0;
					invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					getfield_a_this 25;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyUID
					sconst_0;
					getfield_a_this 25;		// reference CitadelWallet/im/status/keycard/KeycardApplet.keyUID
					arraylength;
					sconst_0;
					invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					return;
		}

		.method private removeKey(Ljavacard/framework/APDU;)V {
			.stack 2;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					pop;
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 146;		// isValidated()Z
					ifne L3;
				L2:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L3:	aload_0;
					invokespecial 179;		// CitadelWallet/im/status/keycard/KeycardApplet.clearKeys()V
					return;
		}

		.method private factoryReset(Ljavacard/framework/APDU;)V {
			.stack 4;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	aload_2;
					sconst_2;
					baload;
					bspush -86;
					if_scmpne L3;
				L2:	aload_2;
					sconst_3;
					baload;
					bspush 85;
					if_scmpeq L4;
				L3:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L4:	aload_0;
					invokespecial 179;		// CitadelWallet/im/status/keycard/KeycardApplet.clearKeys()V
					aload_0;
					aconst_null;
					putfield_a 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					aload_0;
					aconst_null;
					putfield_a 31;		// reference CitadelWallet/im/status/keycard/KeycardApplet.mainPIN
					aload_0;
					aconst_null;
					putfield_a 32;		// reference CitadelWallet/im/status/keycard/KeycardApplet.altPIN
					aload_0;
					aconst_null;
					putfield_a 33;		// reference CitadelWallet/im/status/keycard/KeycardApplet.puk
					aload_0;
					aconst_null;
					putfield_a 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a 5;		// reference CitadelWallet/im/status/keycard/Crypto.random
					getfield_a_this 16;		// reference CitadelWallet/im/status/keycard/KeycardApplet.uid
					sconst_0;
					bspush 16;
					invokevirtual 90;		// generateData([BSS)V
					getfield_a_this 28;		// reference CitadelWallet/im/status/keycard/KeycardApplet.data
					sconst_0;
					getfield_a_this 28;		// reference CitadelWallet/im/status/keycard/KeycardApplet.data
					arraylength;
					sconst_0;
					invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					invokestatic 180;		// javacard/framework/JCSystem.isObjectDeletionSupported()Z
					ifeq L6;
				L5:	invokestatic 181;		// javacard/framework/JCSystem.requestObjectDeletion()V
				L6:	return;
		}

		.method private generateKey(Ljavacard/framework/APDU;)V {
			.stack 4;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					pop;
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 146;		// isValidated()Z
					ifne L3;
				L2:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L3:	aload_2;
					sconst_4;
					bspush 64;
					bastore;
					getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					getfield_a 5;		// reference CitadelWallet/im/status/keycard/Crypto.random
					aload_2;
					sconst_5;
					bspush 64;
					invokevirtual 90;		// generateData([BSS)V
					aload_0;
					aload_2;
					invokespecial 162;		// CitadelWallet/im/status/keycard/KeycardApplet.loadSeed([B)V
					aload_0;
					sconst_0;
					putfield_s 35;		// short CitadelWallet/im/status/keycard/KeycardApplet.pinlessPathLen
					aload_0;
					aload_1;
					aload_2;
					invokespecial 164;		// CitadelWallet/im/status/keycard/KeycardApplet.generateKeyUIDAndRespond(Ljavacard/framework/APDU;[B)V
					return;
		}

		.method private sign(Ljavacard/framework/APDU;)V {
			.stack 7;
			.locals 9;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	sconst_0;
					sstore_3;
				L2:	sconst_0;
					sstore 4;
				L3:	sconst_0;
					sstore 5;
				L4:	aload_2;
					sconst_2;
					baload;
					bspush -64;
					sand;
					sstore 6;
				L5:	aload_2;
					sconst_2;
					baload;
					bspush 63;
					sand;
					slookupswitch L11 5 0 L6 1 L7 2 L8 3 L9 32 L10;
				L6:	bspush -128;
					sstore 6;
					goto L12;
				L7:	goto L12;
				L8:	sconst_1;
					sstore 4;
					goto L12;
				L9:	sconst_1;
					sstore_3;
					bspush -64;
					sstore 6;
					goto L12;
				L10:	sconst_1;
					sstore 5;
					goto L12;
				L11:	sspush 27392;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L12:	sload_3;
					ifeq L16;
				L13:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					invokevirtual 77;		// isOpen()Z
					ifne L16;
				L14:	aload_2;
					sconst_4;
					baload;
					sspush 255;
					sand;
					sstore 7;
				L15:	goto L17;
				L16:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					sstore 7;
				L17:	sload_3;
					ifeq L20;
				L18:	getfield_s_this 35;		// short CitadelWallet/im/status/keycard/KeycardApplet.pinlessPathLen
					ifne L20;
				L19:	sspush 27272;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L20:	sload 7;
					bspush 32;
					if_scmpge L22;
				L21:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L22:	sload 7;
					bspush 32;
					ssub;
					sstore 8;
				L23:	aload_0;
					aload_2;
					bspush 32;
					sload 8;
					sload 6;
					invokespecial 172;		// CitadelWallet/im/status/keycard/KeycardApplet.updateDerivationPath([BSSB)V
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 146;		// isValidated()Z
					ifne L26;
				L24:	sload_3;
					ifne L26;
				L25:	aload_0;
					invokespecial 182;		// CitadelWallet/im/status/keycard/KeycardApplet.isPinless()Z
					ifeq L27;
				L26:	getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					invokeinterface 1 82 3;		// javacard/security/ECPrivateKey
					ifne L28;
				L27:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L28:	sload 5;
					ifeq L35;
				L29:	aload_2;
					bspush 37;
					bspush -96;
					bastore;
					aload_2;
					bspush 40;
					bspush -128;
					bastore;
					aload_2;
					bspush 41;
					bspush 32;
					dup_x 19;
					bastore;
					sstore 9;
				L30:	sinc 9 5;
					bspush 37;
					sload 9;
					sadd;
					sstore 10;
				L31:	getfield_a_this 15;		// reference CitadelWallet/im/status/keycard/KeycardApplet.curve25519
					aload_2;
					bspush 42;
					invokevirtual 183;		// GetPublicKey([BS)S
					pop;
					getfield_a_this 15;		// reference CitadelWallet/im/status/keycard/KeycardApplet.curve25519
					aload_2;
					sconst_5;
					aload_2;
					sconst_4;
					baload;
					aload_2;
					sload 10;
					invokevirtual 184;		// SignData([BSS[BS)S
					pop;
					sinc 9 64;
					aload_2;
					bspush 38;
					bspush -127;
					bastore;
					aload_2;
					bspush 39;
					sload 9;
					sconst_3;
					ssub;
					s2b;
					bastore;
					getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					invokevirtual 77;		// isOpen()Z
					ifeq L33;
				L32:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					sload 9;
					sspush -28672;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
					goto L34;
				L33:	aload_1;
					bspush 37;
					sload 9;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
				L34:	return;
				L35:	aload_0;
					aload_2;
					bspush 32;
					invokespecial 185;		// CitadelWallet/im/status/keycard/KeycardApplet.doDerive([BS)V
					aload_2;
					bspush 37;
					bspush -96;
					bastore;
					aload_2;
					bspush 40;
					bspush -128;
					bastore;
					aload_2;
					bspush 41;
					bspush 65;
					dup_x 19;
					bastore;
					sstore 9;
				L36:	getfield_a_this 14;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secp256k1
					getfield_a_this 27;		// reference CitadelWallet/im/status/keycard/KeycardApplet.derivationOutput
					sconst_0;
					aload_2;
					bspush 42;
					invokevirtual 175;		// derivePublicKey([BS[BS)S
					pop;
					sinc 9 5;
					bspush 37;
					sload 9;
					sadd;
					sstore 10;
				L37:	getfield_a_this 26;		// reference CitadelWallet/im/status/keycard/KeycardApplet.signature
					getfield_a_this 14;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secp256k1
					getfield_a 38;		// reference CitadelWallet/im/status/keycard/SECP256k1.tmpECPrivateKey
					sconst_1;
					invokevirtual 163;		// init(Ljavacard/security/Key;B)V
					sload 9;
					getfield_a_this 26;		// reference CitadelWallet/im/status/keycard/KeycardApplet.signature
					aload_2;
					sconst_5;
					bspush 32;
					aload_2;
					sload 10;
					invokevirtual 165;		// signPreComputedHash([BSS[BS)S
					sadd;
					sstore 9;
					sload 9;
					getfield_a_this 13;		// reference CitadelWallet/im/status/keycard/KeycardApplet.crypto
					aload_2;
					sload 10;
					invokevirtual 174;		// fixS([BS)S
					sadd;
					sstore 9;
					aload_2;
					bspush 38;
					bspush -127;
					bastore;
					aload_2;
					bspush 39;
					sload 9;
					sconst_3;
					ssub;
					s2b;
					bastore;
					sload 4;
					ifeq L39;
				L38:	aload_0;
					invokevirtual 173;		// commitTmpPath()V
				L39:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					invokevirtual 77;		// isOpen()Z
					ifeq L41;
				L40:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					sload 9;
					sspush -28672;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
					goto L42;
				L41:	aload_1;
					bspush 37;
					sload 9;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
				L42:	return;
		}

		.method private setPinlessPath(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					sstore_3;
				L2:	getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 146;		// isValidated()Z
					ifne L4;
				L3:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L4:	sload_3;
					sconst_4;
					srem;
					ifne L6;
				L5:	sload_3;
					getfield_a_this 23;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pinlessPath
					arraylength;
					if_scmple L7;
				L6:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L7:	invokestatic 166;		// javacard/framework/JCSystem.beginTransaction()V
					aload_0;
					sload_3;
					putfield_s 35;		// short CitadelWallet/im/status/keycard/KeycardApplet.pinlessPathLen
					aload_2;
					sconst_5;
					getfield_a_this 23;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pinlessPath
					sconst_0;
					sload_3;
					invokestatic 167;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					invokestatic 170;		// javacard/framework/JCSystem.commitTransaction()V
					return;
		}

		.method private exportKey(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 9;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					sstore_3;
				L2:	getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 146;		// isValidated()Z
					ifeq L4;
				L3:	getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					invokeinterface 1 82 3;		// javacard/security/ECPrivateKey
					ifne L5;
				L4:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L5:	aload_2;
					sconst_3;
					baload;
					stableswitch L15 0 2 L6 L9 L12;
				L6:	sconst_0;
					sstore 4;
				L7:	sconst_0;
					sstore 5;
				L8:	goto L16;
				L9:	sconst_1;
					sstore 4;
				L10:	sconst_0;
					sstore 5;
				L11:	goto L16;
				L12:	sconst_1;
					sstore 4;
				L13:	sconst_1;
					sstore 5;
				L14:	goto L16;
				L15:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L16:	sconst_0;
					sstore 6;
				L17:	aload_2;
					sconst_2;
					baload;
					bspush -64;
					sand;
					sstore 7;
				L18:	aload_2;
					sconst_2;
					baload;
					bspush 63;
					sand;
					stableswitch L22 0 2 L19 L20 L21;
				L19:	bspush -128;
					sstore 7;
					goto L23;
				L20:	goto L23;
				L21:	sconst_1;
					sstore 6;
					goto L23;
				L22:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L23:	aload_0;
					aload_2;
					sconst_0;
					sload_3;
					sload 7;
					invokespecial 172;		// CitadelWallet/im/status/keycard/KeycardApplet.updateDerivationPath([BSSB)V
					aload_0;
					invokespecial 187;		// CitadelWallet/im/status/keycard/KeycardApplet.isEIP1581()Z
					sstore 8;
				L24:	sload 4;
					ifne L26;
				L25:	sload 8;
					ifeq L28;
				L26:	sload 5;
					ifeq L29;
				L27:	sload 8;
					ifeq L29;
				L28:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L29:	aload_0;
					aload_2;
					sconst_0;
					invokespecial 185;		// CitadelWallet/im/status/keycard/KeycardApplet.doDerive([BS)V
					bspush 37;
					sstore 9;
				L30:	aload_2;
					sload 9;
					dup;
					sconst_1;
					sadd;
					sstore 9;
					bspush -95;
					bastore;
					sinc 9 1;
					sload 4;
					ifeq L34;
				L31:	aload_2;
					sload 9;
					dup;
					sconst_1;
					sadd;
					sstore 9;
					bspush -128;
					bastore;
					sinc 9 1;
					getfield_a_this 14;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secp256k1
					getfield_a_this 27;		// reference CitadelWallet/im/status/keycard/KeycardApplet.derivationOutput
					sconst_0;
					aload_2;
					sload 9;
					invokevirtual 175;		// derivePublicKey([BS[BS)S
					sstore 10;
				L32:	aload_2;
					sload 9;
					sconst_1;
					ssub;
					sload 10;
					s2b;
					bastore;
					sload 9;
					sload 10;
					sadd;
					sstore 9;
					sload 5;
					ifeq L36;
				L33:	aload_2;
					sload 9;
					dup;
					sconst_1;
					sadd;
					sstore 9;
					bspush -126;
					bastore;
					sinc 9 1;
					getfield_a_this 27;		// reference CitadelWallet/im/status/keycard/KeycardApplet.derivationOutput
					bspush 32;
					aload_2;
					sload 9;
					bspush 32;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					bspush 32;
					sstore 10;
					aload_2;
					sload 9;
					sconst_1;
					ssub;
					sload 10;
					s2b;
					bastore;
					sload 9;
					sload 10;
					sadd;
					sstore 9;
					goto L36;
				L34:	aload_2;
					sload 9;
					dup;
					sconst_1;
					sadd;
					sstore 9;
					bspush -127;
					bastore;
					sinc 9 1;
					getfield_a_this 27;		// reference CitadelWallet/im/status/keycard/KeycardApplet.derivationOutput
					sconst_0;
					aload_2;
					sload 9;
					bspush 32;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					bspush 32;
					sstore 10;
				L35:	aload_2;
					sload 9;
					sconst_1;
					ssub;
					sload 10;
					s2b;
					bastore;
					sload 9;
					sload 10;
					sadd;
					sstore 9;
				L36:	sload 9;
					bspush 37;
					ssub;
					sstore 10;
					aload_2;
					bspush 38;
					sload 10;
					sconst_2;
					ssub;
					s2b;
					bastore;
					sload 6;
					ifeq L38;
				L37:	aload_0;
					invokevirtual 173;		// commitTmpPath()V
				L38:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					sload 10;
					sspush -28672;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
					return;
		}

		.method private getData(Ljavacard/framework/APDU;)V {
			.stack 5;
			.locals 3;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					invokevirtual 77;		// isOpen()Z
					ifeq L3;
				L2:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					pop;
				L3:	aload_2;
					sconst_2;
					baload;
					stableswitch L10 0 2 L4 L6 L8;
				L4:	getfield_a_this 28;		// reference CitadelWallet/im/status/keycard/KeycardApplet.data
					astore_3;
				L5:	goto L11;
				L6:	getstatic_a 188;		// reference CitadelWallet/im/status/keycard/SharedMemory.ndefDataFile
					astore_3;
				L7:	goto L11;
				L8:	getstatic_a 94;		// reference CitadelWallet/im/status/keycard/SharedMemory.cashDataFile
					astore_3;
				L9:	goto L11;
				L10:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L11:	sconst_0;
					aload_3;
					sconst_0;
					baload;
					invokestatic 93;		// javacard/framework/Util.makeShort(BB)S
					sstore 4;
				L12:	aload_3;
					sconst_1;
					aload_2;
					bspush 37;
					sload 4;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					invokevirtual 77;		// isOpen()Z
					ifeq L14;
				L13:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_1;
					sload 4;
					sspush -28672;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
					goto L15;
				L14:	aload_1;
					bspush 37;
					sload 4;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
				L15:	return;
		}

		.method private storeData(Ljavacard/framework/APDU;)V {
			.stack 6;
			.locals 3;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_a_this 30;		// reference CitadelWallet/im/status/keycard/KeycardApplet.secureChannel
					aload_2;
					invokevirtual 78;		// preprocessAPDU([B)S
					pop;
					getfield_a_this 29;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pin
					invokevirtual 146;		// isValidated()Z
					ifne L3;
				L2:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L3:	aload_2;
					sconst_2;
					baload;
					stableswitch L10 0 2 L4 L6 L8;
				L4:	getfield_a_this 28;		// reference CitadelWallet/im/status/keycard/KeycardApplet.data
					astore_3;
				L5:	goto L11;
				L6:	getstatic_a 188;		// reference CitadelWallet/im/status/keycard/SharedMemory.ndefDataFile
					astore_3;
				L7:	goto L11;
				L8:	getstatic_a 94;		// reference CitadelWallet/im/status/keycard/SharedMemory.cashDataFile
					astore_3;
				L9:	goto L11;
				L10:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L11:	sconst_0;
					aload_2;
					sconst_4;
					baload;
					invokestatic 93;		// javacard/framework/Util.makeShort(BB)S
					sstore 4;
				L12:	sload 4;
					aload_3;
					arraylength;
					if_scmplt L14;
				L13:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L14:	invokestatic 166;		// javacard/framework/JCSystem.beginTransaction()V
					aload_2;
					sconst_4;
					aload_3;
					sconst_0;
					sload 4;
					sconst_1;
					sadd;
					invokestatic 167;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					invokestatic 170;		// javacard/framework/JCSystem.commitTransaction()V
					return;
		}

		.method private allDigits([BSS)Z {
			.stack 3;
			.locals 1;

				L0:	goto L5;
				L1:	sinc 3 -1;
					aload_1;
					sload_2;
					sload_3;
					sadd;
					baload;
					sstore 4;
				L2:	sload 4;
					bspush 48;
					if_scmplt L4;
				L3:	sload 4;
					bspush 57;
					if_scmple L5;
				L4:	sconst_0;
					sreturn;
				L5:	sload_3;
					ifgt L1;
				L6:	sconst_1;
					sreturn;
		}

		.method private isPinless()Z {
			.stack 5;
			.locals 0;

				L0:	getfield_s_this 35;		// short CitadelWallet/im/status/keycard/KeycardApplet.pinlessPathLen
					ifle L4;
				L1:	getfield_s_this 35;		// short CitadelWallet/im/status/keycard/KeycardApplet.pinlessPathLen
					getfield_s_this 37;		// short CitadelWallet/im/status/keycard/KeycardApplet.tmpPathLen
					if_scmpne L4;
				L2:	getfield_a_this 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					sconst_0;
					getfield_a_this 23;		// reference CitadelWallet/im/status/keycard/KeycardApplet.pinlessPath
					sconst_0;
					getfield_s_this 37;		// short CitadelWallet/im/status/keycard/KeycardApplet.tmpPathLen
					invokestatic 189;		// javacard/framework/Util.arrayCompare([BS[BSS)B
					ifne L4;
				L3:	sconst_1;
					sreturn;
				L4:	sconst_0;
					sreturn;
		}

		.method private isEIP1581()Z {
			.stack 5;
			.locals 0;

				L0:	getfield_s_this 37;		// short CitadelWallet/im/status/keycard/KeycardApplet.tmpPathLen
					getstatic_a 190;		// reference CitadelWallet/im/status/keycard/KeycardApplet.EIP_1581_PREFIX
					arraylength;
					bspush 8;
					sadd;
					if_scmplt L3;
				L1:	getstatic_a 190;		// reference CitadelWallet/im/status/keycard/KeycardApplet.EIP_1581_PREFIX
					sconst_0;
					getfield_a_this 24;		// reference CitadelWallet/im/status/keycard/KeycardApplet.tmpPath
					sconst_0;
					getstatic_a 190;		// reference CitadelWallet/im/status/keycard/KeycardApplet.EIP_1581_PREFIX
					arraylength;
					invokestatic 189;		// javacard/framework/Util.arrayCompare([BS[BSS)B
					ifne L3;
				L2:	sconst_1;
					sreturn;
				L3:	sconst_0;
					sreturn;
		}

		.method private resetCurveParameters()V {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 17;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPublic
					invokestatic 88;		// CitadelWallet/im/status/keycard/SECP256k1.setCurveParameters(Ljavacard/security/ECKey;)V
					getfield_a_this 18;		// reference CitadelWallet/im/status/keycard/KeycardApplet.masterPrivate
					invokestatic 88;		// CitadelWallet/im/status/keycard/SECP256k1.setCurveParameters(Ljavacard/security/ECKey;)V
					return;
		}

	}

	.class public NDEFApplet 4 extends 0.3 {		// extends javacard/framework/Applet

		.fields {
			private short selectedFile 0;		// S
			private static final byte INS_READ_BINARY = -80;		// B
			private static final short FILEID_NONE = -1;		// S
			private static final short FILEID_NDEF_CAPS = -7933;		// S
			private static final short FILEID_NDEF_DATA = -7932;		// S
			private static final byte SELECT_P1_BY_FILEID = 0;		// B
			private static final byte SELECT_P2_FIRST_OR_ONLY = 12;		// B
			private static final short NDEF_READ_SIZE = 255;		// S
			private static final byte[] NDEF_CAPS_FILE = {15,0,15,32,0,-1,0,1,4,6,-31,4,4,0,0,-1};		// [B
		}

		.publicMethodTable 7 {
			equals(Ljava/lang/Object;)Z;
			register()V;
			register([BSB)V;
			selectingApplet()Z;
			deselect()V;
			getShareableInterfaceObject(Ljavacard/framework/AID;B)Ljavacard/framework/Shareable;;
			select()Z;
			process(Ljavacard/framework/APDU;)V;
		}

		.packageMethodTable 0 {
		}

		.method public static install([BSB)V 0 {
			.stack 4;
			.locals 0;

				L0:	new 191;		// CitadelWallet/im/status/keycard/NDEFApplet
					aload_0;
					sload_1;
					sload_2;
					invokespecial 192;		// CitadelWallet/im/status/keycard/NDEFApplet.<init>([BSB)V
					return;
		}

		.method public <init>([BSB)V 1 {
			.stack 6;
			.locals 2;

				L0:	aload_0;
					invokespecial 222;		// javacard/framework/Applet.<init>()V
					sload_2;
					aload_1;
					sload_2;
					baload;
					sadd;
					sconst_1;
					sadd;
					sstore 4;
				L1:	sload 4;
					aload_1;
					sload 4;
					baload;
					sconst_1;
					sadd;
					sadd;
					sstore 4;
					sconst_0;
					aload_1;
					sload 4;
					baload;
					invokestatic 93;		// javacard/framework/Util.makeShort(BB)S
					sstore 5;
				L2:	sload 5;
					sconst_2;
					if_scmple L5;
				L3:	sload 5;
					sconst_2;
					ssub;
					aload_1;
					sload 4;
					sconst_1;
					sadd;
					baload;
					aload_1;
					sload 4;
					sconst_2;
					sadd;
					baload;
					invokestatic 93;		// javacard/framework/Util.makeShort(BB)S
					if_scmpne L5;
				L4:	aload_1;
					sload 4;
					getstatic_a 188;		// reference CitadelWallet/im/status/keycard/SharedMemory.ndefDataFile
					sconst_0;
					sload 5;
					sconst_1;
					sadd;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
				L5:	aload_0;
					aload_1;
					sload_2;
					sconst_1;
					sadd;
					aload_1;
					sload_2;
					baload;
					invokevirtual 193;		// register([BSB)V
					return;
		}

		.method public process(Ljavacard/framework/APDU;)V 7 {
			.stack 2;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_0;
					invokevirtual 194;		// selectingApplet()Z
					ifeq L2;
				L1:	aload_0;
					sconst_m1;
					putfield_s 39;		// short CitadelWallet/im/status/keycard/NDEFApplet.selectedFile
					return;
				L2:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L3:	aload_2;
					sconst_1;
					baload;
					slookupswitch L6 2 -92 L4 -80 L5;
				L4:	aload_0;
					aload_1;
					invokespecial 196;		// CitadelWallet/im/status/keycard/NDEFApplet.processSelect(Ljavacard/framework/APDU;)V
					goto L7;
				L5:	aload_0;
					aload_1;
					invokespecial 197;		// CitadelWallet/im/status/keycard/NDEFApplet.processReadBinary(Ljavacard/framework/APDU;)V
					goto L7;
				L6:	sspush 27904;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L7:	return;
		}

		.method private processSelect(Ljavacard/framework/APDU;)V {
			.stack 2;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	aload_1;
					invokevirtual 99;		// setIncomingAndReceive()S
					pop;
					aload_2;
					sconst_2;
					baload;
					ifne L3;
				L2:	aload_2;
					sconst_3;
					baload;
					bspush 12;
					if_scmpeq L4;
				L3:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					goto L6;
				L4:	aload_2;
					sconst_4;
					baload;
					sconst_2;
					if_scmpeq L6;
				L5:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L6:	aload_2;
					sconst_5;
					invokestatic 177;		// javacard/framework/Util.getShort([BS)S
					sstore_3;
				L7:	sload_3;
					stableswitch L9 -7933 -7932 L8 L8;
				L8:	aload_0;
					sload_3;
					putfield_s 39;		// short CitadelWallet/im/status/keycard/NDEFApplet.selectedFile
					goto L10;
				L9:	sspush 27266;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L10:	return;
		}

		.method private processReadBinary(Ljavacard/framework/APDU;)V {
			.stack 4;
			.locals 5;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	getfield_s_this 39;		// short CitadelWallet/im/status/keycard/NDEFApplet.selectedFile
					stableswitch L6 -7933 -7932 L2 L4;
				L2:	getstatic_a 198;		// reference CitadelWallet/im/status/keycard/NDEFApplet.NDEF_CAPS_FILE
					astore_3;
				L3:	goto L7;
				L4:	getstatic_a 188;		// reference CitadelWallet/im/status/keycard/SharedMemory.ndefDataFile
					astore_3;
				L5:	goto L7;
				L6:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L7:	sconst_0;
					aload_3;
					sconst_0;
					baload;
					invokestatic 93;		// javacard/framework/Util.makeShort(BB)S
					sstore 4;
				L8:	aload_2;
					sconst_2;
					invokestatic 177;		// javacard/framework/Util.getShort([BS)S
					sstore 5;
				L9:	sload 5;
					iflt L11;
				L10:	sload 5;
					sload 4;
					if_scmplt L12;
				L11:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L12:	aload_1;
					invokevirtual 199;		// setOutgoingNoChaining()S
					sstore 6;
				L13:	sload 6;
					sspush 255;
					if_scmple L15;
				L14:	sspush 255;
					sstore 6;
				L15:	sload 5;
					sload 6;
					sadd;
					sload 4;
					if_scmplt L17;
				L16:	sload 4;
					sload 5;
					ssub;
					sstore 6;
				L17:	sinc 5 1;
					aload_1;
					sload 6;
					invokevirtual 200;		// setOutgoingLength(S)V
					aload_1;
					aload_3;
					sload 5;
					sload 6;
					invokevirtual 201;		// sendBytesLong([BSS)V
					return;
		}

	}

	.class public SECP256k1 5 extends 2.0 {		// extends java/lang/Object

		.fields {
			private 1.22 ecPointMultiplier 0;		// Ljavacard/security/KeyAgreement;
			 1.18 tmpECPrivateKey 1;		// Ljavacard/security/ECPrivateKey;
			static final byte[] SECP256K1_FP = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2,-1,-1,-4,47};		// [B
			static final byte[] SECP256K1_A = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};		// [B
			static final byte[] SECP256K1_B = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7};		// [B
			static final byte[] SECP256K1_G = {4,121,-66,102,126,-7,-36,-69,-84,85,-96,98,-107,-50,-121,11,7,2,-101,-4,-37,45,-50,40,-39,89,-14,-127,91,22,-8,23,-104,72,58,-38,119,38,-93,-60,101,93,-92,-5,-4,14,17,8,-88,-3,23,-76,72,-90,-123,84,25,-100,71,-48,-113,-5,16,-44,-72};		// [B
			static final byte[] SECP256K1_R = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-2,-70,-82,-36,-26,-81,72,-96,59,-65,-46,94,-116,-48,54,65,65};		// [B
			static final byte SECP256K1_K = 1;		// B
			static final short SECP256K1_KEY_SIZE = 256;		// S
			private static final byte ALG_EC_SVDP_DH_PLAIN_XY = 6;		// B
		}

		.publicMethodTable 1 {
			equals(Ljava/lang/Object;)Z;
		}

		.packageMethodTable 0 {
			derivePublicKey(Ljavacard/security/ECPrivateKey;[BS)S;
			derivePublicKey([BS[BS)S;
			multiplyPoint(Ljavacard/security/ECPrivateKey;[BSS[BS)S;
		}

		.method  <init>()V {
			.stack 4;
			.locals 0;

				L0:	aload_0;
					invokespecial 186;		// java/lang/Object.<init>()V
					aload_0;
					bspush 6;
					sconst_0;
					invokestatic 213;		// javacard/security/KeyAgreement.getInstance(BZ)Ljavacard/security/KeyAgreement;
					putfield_a 40;		// reference CitadelWallet/im/status/keycard/SECP256k1.ecPointMultiplier
					aload_0;
					bspush 12;
					sspush 256;
					sconst_0;
					invokestatic 220;		// javacard/security/KeyBuilder.buildKey(BSZ)Ljavacard/security/Key;
					checkcast 0 82;		// T_CLASSORINTERFACE javacard/security/ECPrivateKey
					putfield_a 38;		// reference CitadelWallet/im/status/keycard/SECP256k1.tmpECPrivateKey
					getfield_a_this 38;		// reference CitadelWallet/im/status/keycard/SECP256k1.tmpECPrivateKey
					invokestatic 88;		// CitadelWallet/im/status/keycard/SECP256k1.setCurveParameters(Ljavacard/security/ECKey;)V
					return;
		}

		.method static setCurveParameters(Ljavacard/security/ECKey;)V {
			.stack 4;
			.locals 0;

			.descriptor	Ljavacard/security/ECKey;	1.17;

				L0:	aload_0;
					getstatic_a 203;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_A
					sconst_0;
					getstatic_a 203;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_A
					arraylength;
					invokeinterface 4 204 3;		// javacard/security/ECKey
					aload_0;
					getstatic_a 205;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_B
					sconst_0;
					getstatic_a 205;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_B
					arraylength;
					invokeinterface 4 204 4;		// javacard/security/ECKey
					aload_0;
					getstatic_a 206;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_FP
					sconst_0;
					getstatic_a 206;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_FP
					arraylength;
					invokeinterface 4 204 0;		// javacard/security/ECKey
					aload_0;
					getstatic_a 207;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_G
					sconst_0;
					getstatic_a 207;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_G
					arraylength;
					invokeinterface 4 204 5;		// javacard/security/ECKey
					aload_0;
					getstatic_a 56;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_R
					sconst_0;
					getstatic_a 56;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_R
					arraylength;
					invokeinterface 4 204 6;		// javacard/security/ECKey
					aload_0;
					sconst_1;
					invokeinterface 2 204 7;		// javacard/security/ECKey
					return;
		}

		.method  derivePublicKey(Ljavacard/security/ECPrivateKey;[BS)S 128 {
			.stack 7;
			.locals 0;

			.descriptor	Ljavacard/security/ECPrivateKey;	1.18;

				L0:	aload_0;
					aload_1;
					getstatic_a 207;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_G
					sconst_0;
					getstatic_a 207;		// reference CitadelWallet/im/status/keycard/SECP256k1.SECP256K1_G
					arraylength;
					aload_2;
					sload_3;
					invokevirtual 208;		// multiplyPoint(Ljavacard/security/ECPrivateKey;[BSS[BS)S
					sreturn;
		}

		.method  derivePublicKey([BS[BS)S 129 {
			.stack 4;
			.locals 0;

				L0:	getfield_a_this 38;		// reference CitadelWallet/im/status/keycard/SECP256k1.tmpECPrivateKey
					aload_1;
					sload_2;
					bspush 32;
					invokeinterface 4 82 18;		// javacard/security/ECPrivateKey
					aload_0;
					getfield_a_this 38;		// reference CitadelWallet/im/status/keycard/SECP256k1.tmpECPrivateKey
					aload_3;
					sload 4;
					invokevirtual 168;		// derivePublicKey(Ljavacard/security/ECPrivateKey;[BS)S
					sreturn;
		}

		.method  multiplyPoint(Ljavacard/security/ECPrivateKey;[BSS[BS)S 130 {
			.stack 6;
			.locals 0;

			.descriptor	Ljavacard/security/ECPrivateKey;	1.18;

				L0:	getfield_a_this 40;		// reference CitadelWallet/im/status/keycard/SECP256k1.ecPointMultiplier
					aload_1;
					invokevirtual 209;		// init(Ljavacard/security/PrivateKey;)V
					getfield_a_this 40;		// reference CitadelWallet/im/status/keycard/SECP256k1.ecPointMultiplier
					aload_2;
					sload_3;
					sload 4;
					aload 5;
					sload 6;
					invokevirtual 210;		// generateSecret([BSS[BS)S
					sreturn;
		}

	}

	.class public SecureChannel 6 extends 2.0 {		// extends java/lang/Object

		.fields {
			private 1.20 scEncKey 0;		// Ljavacard/security/AESKey;
			private 1.20 scMacKey 1;		// Ljavacard/security/AESKey;
			private 1.15 scMac 2;		// Ljavacard/security/Signature;
			private 1.16 scKeypair 3;		// Ljavacard/security/KeyPair;
			private byte[] secret 4;		// [B
			private byte[] pairingSecret 5;		// [B
			private byte[] pairingKeys 6;		// [B
			private Crypto crypto 7;		// LCitadelWallet/im/status/keycard/Crypto;
			private short preassignedPairingOffset 8;		// S
			private byte remainingSlots 9;		// B
			private boolean mutuallyAuthenticated 10;		// Z
			public static final short SC_KEY_LENGTH = 256;		// S
			public static final short SC_SECRET_LENGTH = 32;		// S
			public static final short PAIRING_KEY_LENGTH = 33;		// S
			public static final short SC_BLOCK_SIZE = 16;		// S
			public static final short SC_OUT_OFFSET = 37;		// S
			public static final byte INS_OPEN_SECURE_CHANNEL = 16;		// B
			public static final byte INS_MUTUALLY_AUTHENTICATE = 17;		// B
			public static final byte INS_PAIR = 18;		// B
			public static final byte INS_UNPAIR = 19;		// B
			public static final byte PAIR_P1_FIRST_STEP = 0;		// B
			public static final byte PAIR_P1_LAST_STEP = 1;		// B
			public static final short SC_MAX_PLAIN_LENGTH = 223;		// S
		}

		.publicMethodTable 1 {
			equals(Ljava/lang/Object;)Z;
			initSecureChannel([BS)V;
			oneShotDecrypt([B)V;
			openSecureChannel(Ljavacard/framework/APDU;)V;
			mutuallyAuthenticate(Ljavacard/framework/APDU;)V;
			pair(Ljavacard/framework/APDU;)V;
			unpair([B)V;
			preprocessAPDU([B)S;
			respond(Ljavacard/framework/APDU;SS)V;
			copyPublicKey([BS)S;
			isOpen()Z;
			getRemainingPairingSlots()B;
			reset()V;
			updatePairingSecret([BB)V;
		}

		.packageMethodTable 0 {
		}

		.method public <init>(BLCitadelWallet/im/status/keycard/Crypto;LCitadelWallet/im/status/keycard/SECP256k1;)V 0 {
			.stack 5;
			.locals 0;

				L0:	aload_0;
					invokespecial 186;		// java/lang/Object.<init>()V
					aload_0;
					sconst_m1;
					putfield_s 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					aload_0;
					sconst_0;
					putfield_b 42;		// boolean CitadelWallet/im/status/keycard/SecureChannel.mutuallyAuthenticated
					aload_0;
					aload_2;
					putfield_a 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					aload_0;
					bspush 18;
					sconst_0;
					invokestatic 91;		// javacard/security/Signature.getInstance(BZ)Ljavacard/security/Signature;
					putfield_a 44;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMac
					aload_0;
					bspush 14;
					sspush 256;
					sconst_0;
					invokestatic 220;		// javacard/security/KeyBuilder.buildKey(BSZ)Ljavacard/security/Key;
					checkcast 0 215;		// T_CLASSORINTERFACE javacard/security/AESKey
					putfield_a 45;		// reference CitadelWallet/im/status/keycard/SecureChannel.scEncKey
					aload_0;
					bspush 14;
					sspush 256;
					sconst_0;
					invokestatic 220;		// javacard/security/KeyBuilder.buildKey(BSZ)Ljavacard/security/Key;
					checkcast 0 215;		// T_CLASSORINTERFACE javacard/security/AESKey
					putfield_a 46;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMacKey
					aload_0;
					bspush 64;
					sconst_2;
					invokestatic 232;		// javacard/framework/JCSystem.makeTransientByteArray(SB)[B
					putfield_a 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					aload_0;
					bspush 33;
					sload_1;
					smul;
					newarray 11;
					putfield_a 48;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingKeys
					aload_0;
					new 212;		// javacard/security/KeyPair
					dup;
					sconst_5;
					sspush 256;
					invokespecial 214;		// javacard/security/KeyPair.<init>(BS)V
					putfield_a 49;		// reference CitadelWallet/im/status/keycard/SecureChannel.scKeypair
					getfield_a_this 49;		// reference CitadelWallet/im/status/keycard/SecureChannel.scKeypair
					invokevirtual 233;		// getPrivate()Ljavacard/security/PrivateKey;
					checkcast 0 204;		// T_CLASSORINTERFACE javacard/security/ECKey
					invokestatic 88;		// CitadelWallet/im/status/keycard/SECP256k1.setCurveParameters(Ljavacard/security/ECKey;)V
					getfield_a_this 49;		// reference CitadelWallet/im/status/keycard/SecureChannel.scKeypair
					invokevirtual 218;		// getPublic()Ljavacard/security/PublicKey;
					checkcast 0 204;		// T_CLASSORINTERFACE javacard/security/ECKey
					invokestatic 88;		// CitadelWallet/im/status/keycard/SECP256k1.setCurveParameters(Ljavacard/security/ECKey;)V
					getfield_a_this 49;		// reference CitadelWallet/im/status/keycard/SecureChannel.scKeypair
					invokevirtual 89;		// genKeyPair()V
					aload_0;
					sload_1;
					putfield_b 50;		// byte CitadelWallet/im/status/keycard/SecureChannel.remainingSlots
					aload_0;
					bspush 32;
					newarray 11;
					putfield_a 51;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingSecret
					return;
		}

		.method public initSecureChannel([BS)V 1 {
			.stack 5;
			.locals 0;

				L0:	aload_1;
					sload_2;
					getfield_a_this 51;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingSecret
					sconst_0;
					bspush 32;
					invokestatic 167;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					getfield_a_this 49;		// reference CitadelWallet/im/status/keycard/SecureChannel.scKeypair
					invokevirtual 89;		// genKeyPair()V
					return;
		}

		.method public oneShotDecrypt([B)V 2 {
			.stack 8;
			.locals 1;

				L0:	getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 7;		// reference CitadelWallet/im/status/keycard/Crypto.ecdh
					getfield_a_this 49;		// reference CitadelWallet/im/status/keycard/SecureChannel.scKeypair
					invokevirtual 233;		// getPrivate()Ljavacard/security/PrivateKey;
					invokevirtual 209;		// init(Ljavacard/security/PrivateKey;)V
					bspush 6;
					sstore_2;
				L1:	getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 7;		// reference CitadelWallet/im/status/keycard/Crypto.ecdh
					aload_1;
					sload_2;
					aload_1;
					sconst_5;
					baload;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					invokevirtual 210;		// generateSecret([BSS[BS)S
					pop;
					sload_2;
					aload_1;
					sconst_5;
					baload;
					sadd;
					sstore_2;
				L2:	goto L4;
				L3:	pop;
					sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L4:	getfield_a_this 45;		// reference CitadelWallet/im/status/keycard/SecureChannel.scEncKey
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					invokeinterface 3 215 4;		// javacard/security/AESKey
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 9;		// reference CitadelWallet/im/status/keycard/Crypto.aesCbcIso9797m2
					getfield_a_this 45;		// reference CitadelWallet/im/status/keycard/SecureChannel.scEncKey
					sconst_1;
					aload_1;
					sload_2;
					bspush 16;
					invokevirtual 223;		// init(Ljavacard/security/Key;B[BSS)V
					sinc 2 16;
					aload_1;
					sconst_4;
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 9;		// reference CitadelWallet/im/status/keycard/Crypto.aesCbcIso9797m2
					aload_1;
					sload_2;
					aload_1;
					sconst_4;
					baload;
					sspush 255;
					sand;
					sload_2;
					ssub;
					sconst_5;
					sadd;
					aload_1;
					sconst_5;
					invokevirtual 224;		// doFinal([BSS[BS)S
					s2b;
					bastore;
					return;
			.exceptionTable {
				// start_block end_block handler_block catch_type_index
				L1 L2 L3 98;
			}
		}

		.method public openSecureChannel(Ljavacard/framework/APDU;)V 3 {
			.stack 6;
			.locals 3;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_0;
					sconst_m1;
					putfield_s 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					aload_0;
					sconst_0;
					putfield_b 42;		// boolean CitadelWallet/im/status/keycard/SecureChannel.mutuallyAuthenticated
					aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L1:	aload_0;
					aload_2;
					sconst_2;
					baload;
					invokespecial 225;		// CitadelWallet/im/status/keycard/SecureChannel.checkPairingIndexAndGetOffset(B)S
					sstore_3;
				L2:	getfield_a_this 48;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingKeys
					sload_3;
					baload;
					sconst_1;
					if_scmpeq L4;
				L3:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					goto L5;
				L4:	sinc 3 1;
				L5:	getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 7;		// reference CitadelWallet/im/status/keycard/Crypto.ecdh
					getfield_a_this 49;		// reference CitadelWallet/im/status/keycard/SecureChannel.scKeypair
					invokevirtual 233;		// getPrivate()Ljavacard/security/PrivateKey;
					invokevirtual 209;		// init(Ljavacard/security/PrivateKey;)V
				L6:	getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 7;		// reference CitadelWallet/im/status/keycard/Crypto.ecdh
					aload_2;
					sconst_5;
					aload_2;
					sconst_4;
					baload;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					invokevirtual 210;		// generateSecret([BSS[BS)S
					sstore 4;
				L7:	goto L9;
				L8:	pop;
					sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L9:	getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 5;		// reference CitadelWallet/im/status/keycard/Crypto.random
					aload_2;
					sconst_0;
					bspush 48;
					invokevirtual 90;		// generateData([BSS)V
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 8;		// reference CitadelWallet/im/status/keycard/Crypto.sha512
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					sload 4;
					invokevirtual 66;		// update([BSS)V
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 8;		// reference CitadelWallet/im/status/keycard/Crypto.sha512
					getfield_a_this 48;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingKeys
					sload_3;
					bspush 32;
					invokevirtual 66;		// update([BSS)V
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 8;		// reference CitadelWallet/im/status/keycard/Crypto.sha512
					aload_2;
					sconst_0;
					bspush 32;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					invokevirtual 67;		// doFinal([BSS[BS)S
					pop;
					getfield_a_this 45;		// reference CitadelWallet/im/status/keycard/SecureChannel.scEncKey
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					invokeinterface 3 215 4;		// javacard/security/AESKey
					getfield_a_this 46;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMacKey
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					bspush 32;
					invokeinterface 3 215 4;		// javacard/security/AESKey
					aload_2;
					bspush 32;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					bspush 16;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					bspush 16;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					arraylength;
					bspush 16;
					ssub;
					sconst_0;
					invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					aload_1;
					sconst_0;
					bspush 48;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
					return;
			.exceptionTable {
				// start_block end_block handler_block catch_type_index
				L6 L7 L8 98;
			}
		}

		.method public mutuallyAuthenticate(Ljavacard/framework/APDU;)V 4 {
			.stack 4;
			.locals 3;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	getfield_a_this 45;		// reference CitadelWallet/im/status/keycard/SecureChannel.scEncKey
					invokeinterface 1 215 3;		// javacard/security/AESKey
					ifne L2;
				L1:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L2:	getfield_b_this 42;		// boolean CitadelWallet/im/status/keycard/SecureChannel.mutuallyAuthenticated
					sstore_2;
				L3:	aload_0;
					sconst_1;
					putfield_b 42;		// boolean CitadelWallet/im/status/keycard/SecureChannel.mutuallyAuthenticated
					aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_3;
				L4:	aload_0;
					aload_3;
					invokevirtual 78;		// preprocessAPDU([B)S
					sstore 4;
				L5:	sload_2;
					ifeq L7;
				L6:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L7:	sload 4;
					bspush 32;
					if_scmpeq L9;
				L8:	aload_0;
					invokevirtual 149;		// reset()V
					sspush 27010;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L9:	getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 5;		// reference CitadelWallet/im/status/keycard/Crypto.random
					aload_3;
					bspush 37;
					bspush 32;
					invokevirtual 90;		// generateData([BSS)V
					aload_0;
					aload_1;
					sload 4;
					sspush -28672;
					invokevirtual 79;		// respond(Ljavacard/framework/APDU;SS)V
					return;
		}

		.method public pair(Ljavacard/framework/APDU;)V 5 {
			.stack 3;
			.locals 2;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_0;
					invokevirtual 77;		// isOpen()Z
					ifeq L2;
				L1:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L2:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore_2;
				L3:	aload_2;
					sconst_4;
					baload;
					bspush 32;
					if_scmpeq L5;
				L4:	sspush 27264;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L5:	aload_2;
					sconst_2;
					baload;
					ifne L8;
				L6:	aload_0;
					aload_2;
					invokespecial 226;		// CitadelWallet/im/status/keycard/SecureChannel.pairStep1([B)S
					sstore_3;
				L7:	goto L13;
				L8:	aload_2;
					sconst_2;
					baload;
					sconst_1;
					if_scmpne L12;
				L9:	getfield_s_this 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					sconst_m1;
					if_scmpeq L12;
				L10:	aload_0;
					aload_2;
					invokespecial 227;		// CitadelWallet/im/status/keycard/SecureChannel.pairStep2([B)S
					sstore_3;
				L11:	goto L13;
				L12:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
					return;
				L13:	aload_1;
					sconst_0;
					sload_3;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
					return;
		}

		.method private pairStep1([B)S {
			.stack 6;
			.locals 1;

				L0:	aload_0;
					sconst_m1;
					putfield_s 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					sconst_0;
					sstore_2;
				L1:	goto L5;
				L2:	getfield_a_this 48;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingKeys
					sload_2;
					baload;
					ifne L4;
				L3:	aload_0;
					sload_2;
					putfield_s 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					goto L6;
				L4:	sinc 2 33;
				L5:	sload_2;
					getfield_a_this 48;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingKeys
					arraylength;
					if_scmplt L2;
				L6:	getfield_s_this 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					sconst_m1;
					if_scmpne L8;
				L7:	sspush 27268;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L8:	getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 6;		// reference CitadelWallet/im/status/keycard/Crypto.sha256
					getfield_a_this 51;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingSecret
					sconst_0;
					bspush 32;
					invokevirtual 66;		// update([BSS)V
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 6;		// reference CitadelWallet/im/status/keycard/Crypto.sha256
					aload_1;
					sconst_5;
					bspush 32;
					aload_1;
					sconst_0;
					invokevirtual 67;		// doFinal([BSS[BS)S
					pop;
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 5;		// reference CitadelWallet/im/status/keycard/Crypto.random
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					bspush 32;
					invokevirtual 90;		// generateData([BSS)V
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					aload_1;
					bspush 32;
					bspush 32;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					bspush 64;
					sreturn;
		}

		.method private pairStep2([B)S {
			.stack 7;
			.locals 0;

				L0:	getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 6;		// reference CitadelWallet/im/status/keycard/Crypto.sha256
					getfield_a_this 51;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingSecret
					sconst_0;
					bspush 32;
					invokevirtual 66;		// update([BSS)V
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 6;		// reference CitadelWallet/im/status/keycard/Crypto.sha256
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					bspush 32;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					invokevirtual 67;		// doFinal([BSS[BS)S
					pop;
					aload_1;
					sconst_5;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					bspush 32;
					invokestatic 189;		// javacard/framework/Util.arrayCompare([BS[BSS)B
					ifeq L2;
				L1:	aload_0;
					sconst_m1;
					putfield_s 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					sspush 27010;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L2:	getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 5;		// reference CitadelWallet/im/status/keycard/Crypto.random
					aload_1;
					sconst_1;
					bspush 32;
					invokevirtual 90;		// generateData([BSS)V
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 6;		// reference CitadelWallet/im/status/keycard/Crypto.sha256
					getfield_a_this 51;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingSecret
					sconst_0;
					bspush 32;
					invokevirtual 66;		// update([BSS)V
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 6;		// reference CitadelWallet/im/status/keycard/Crypto.sha256
					aload_1;
					sconst_1;
					bspush 32;
					getfield_a_this 48;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingKeys
					getfield_s_this 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					sconst_1;
					sadd;
					invokevirtual 67;		// doFinal([BSS[BS)S
					pop;
					getfield_a_this 48;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingKeys
					getfield_s_this 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					sconst_1;
					bastore;
					aload_0;
					dup;
					getfield_b 50;		// byte CitadelWallet/im/status/keycard/SecureChannel.remainingSlots
					sconst_1;
					ssub;
					s2b;
					putfield_b 50;		// byte CitadelWallet/im/status/keycard/SecureChannel.remainingSlots
					aload_1;
					sconst_0;
					getfield_s_this 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					bspush 33;
					sdiv;
					s2b;
					bastore;
					aload_0;
					sconst_m1;
					putfield_s 41;		// short CitadelWallet/im/status/keycard/SecureChannel.preassignedPairingOffset
					bspush 33;
					sreturn;
		}

		.method public unpair([B)V 6 {
			.stack 4;
			.locals 1;

				L0:	aload_0;
					aload_1;
					sconst_2;
					baload;
					invokespecial 225;		// CitadelWallet/im/status/keycard/SecureChannel.checkPairingIndexAndGetOffset(B)S
					sstore_2;
				L1:	getfield_a_this 48;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingKeys
					sload_2;
					baload;
					sconst_1;
					if_scmpne L3;
				L2:	getfield_a_this 48;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingKeys
					sload_2;
					bspush 33;
					sconst_0;
					invokestatic 65;		// javacard/framework/Util.arrayFillNonAtomic([BSSB)S
					pop;
					aload_0;
					dup;
					getfield_b 50;		// byte CitadelWallet/im/status/keycard/SecureChannel.remainingSlots
					sconst_1;
					sadd;
					s2b;
					putfield_b 50;		// byte CitadelWallet/im/status/keycard/SecureChannel.remainingSlots
				L3:	return;
		}

		.method public preprocessAPDU([B)S 7 {
			.stack 6;
			.locals 2;

				L0:	aload_0;
					invokevirtual 77;		// isOpen()Z
					ifne L2;
				L1:	sspush 27013;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L2:	aload_1;
					sconst_4;
					baload;
					sspush 255;
					sand;
					sstore_2;
				L3:	aload_0;
					aload_1;
					sload_2;
					invokespecial 228;		// CitadelWallet/im/status/keycard/SecureChannel.verifyAESMAC([BS)Z
					ifne L5;
				L4:	aload_0;
					invokevirtual 149;		// reset()V
					sspush 27010;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L5:	getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 9;		// reference CitadelWallet/im/status/keycard/Crypto.aesCbcIso9797m2
					getfield_a_this 45;		// reference CitadelWallet/im/status/keycard/SecureChannel.scEncKey
					sconst_1;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					bspush 16;
					invokevirtual 223;		// init(Ljavacard/security/Key;B[BSS)V
					aload_1;
					sconst_5;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					bspush 16;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 9;		// reference CitadelWallet/im/status/keycard/Crypto.aesCbcIso9797m2
					aload_1;
					bspush 21;
					sload_2;
					bspush 16;
					ssub;
					aload_1;
					sconst_5;
					invokevirtual 224;		// doFinal([BSS[BS)S
					sstore_3;
				L6:	aload_1;
					sconst_4;
					sload_3;
					s2b;
					bastore;
					sload_3;
					sreturn;
		}

		.method private verifyAESMAC([BS)Z {
			.stack 7;
			.locals 0;

				L0:	getfield_a_this 44;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMac
					getfield_a_this 46;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMacKey
					sconst_2;
					invokevirtual 163;		// init(Ljavacard/security/Key;B)V
					getfield_a_this 44;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMac
					aload_1;
					sconst_0;
					sconst_5;
					invokevirtual 229;		// update([BSS)V
					getfield_a_this 44;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMac
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					bspush 16;
					bspush 11;
					invokevirtual 229;		// update([BSS)V
					getfield_a_this 44;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMac
					aload_1;
					bspush 21;
					sload_2;
					bspush 16;
					ssub;
					aload_1;
					sconst_5;
					bspush 16;
					invokevirtual 230;		// verify([BSS[BSS)Z
					sreturn;
		}

		.method public respond(Ljavacard/framework/APDU;SS)V 8 {
			.stack 6;
			.locals 1;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	aload_1;
					invokevirtual 103;		// getBuffer()[B
					astore 4;
				L1:	aload 4;
					bspush 37;
					sload_2;
					sadd;
					sload_3;
					invokestatic 144;		// javacard/framework/Util.setShort([BSS)S
					pop;
					sinc 2 2;
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 9;		// reference CitadelWallet/im/status/keycard/Crypto.aesCbcIso9797m2
					getfield_a_this 45;		// reference CitadelWallet/im/status/keycard/SecureChannel.scEncKey
					sconst_2;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					bspush 16;
					invokevirtual 223;		// init(Ljavacard/security/Key;B[BSS)V
					getfield_a_this 43;		// reference CitadelWallet/im/status/keycard/SecureChannel.crypto
					getfield_a 9;		// reference CitadelWallet/im/status/keycard/Crypto.aesCbcIso9797m2
					aload 4;
					bspush 37;
					sload_2;
					aload 4;
					bspush 21;
					invokevirtual 224;		// doFinal([BSS[BS)S
					sstore_2;
					aload 4;
					sconst_0;
					sload_2;
					bspush 16;
					sadd;
					s2b;
					bastore;
					aload_0;
					sload_2;
					aload 4;
					invokespecial 231;		// CitadelWallet/im/status/keycard/SecureChannel.computeAESMAC(S[B)V
					aload 4;
					sconst_5;
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					sconst_0;
					bspush 16;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					sinc 2 16;
					aload_1;
					sconst_5;
					sload_2;
					invokevirtual 154;		// setOutgoingAndSend(SS)V
					return;
		}

		.method private computeAESMAC(S[B)V {
			.stack 6;
			.locals 0;

				L0:	getfield_a_this 44;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMac
					getfield_a_this 46;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMacKey
					sconst_1;
					invokevirtual 163;		// init(Ljavacard/security/Key;B)V
					getfield_a_this 44;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMac
					aload_2;
					sconst_0;
					sconst_1;
					invokevirtual 229;		// update([BSS)V
					getfield_a_this 44;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMac
					getfield_a_this 47;		// reference CitadelWallet/im/status/keycard/SecureChannel.secret
					bspush 16;
					bspush 15;
					invokevirtual 229;		// update([BSS)V
					getfield_a_this 44;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMac
					aload_2;
					bspush 21;
					sload_1;
					aload_2;
					sconst_5;
					invokevirtual 64;		// sign([BSS[BS)S
					pop;
					return;
		}

		.method public copyPublicKey([BS)S 9 {
			.stack 3;
			.locals 1;

				L0:	getfield_a_this 49;		// reference CitadelWallet/im/status/keycard/SecureChannel.scKeypair
					invokevirtual 218;		// getPublic()Ljavacard/security/PublicKey;
					checkcast 0 219;		// T_CLASSORINTERFACE javacard/security/ECPublicKey
					astore_3;
				L1:	aload_3;
					aload_1;
					sload_2;
					invokeinterface 3 219 19;		// javacard/security/ECPublicKey
					sreturn;
		}

		.method public isOpen()Z 10 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 45;		// reference CitadelWallet/im/status/keycard/SecureChannel.scEncKey
					invokeinterface 1 215 3;		// javacard/security/AESKey
					ifeq L4;
				L1:	getfield_a_this 46;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMacKey
					invokeinterface 1 215 3;		// javacard/security/AESKey
					ifeq L4;
				L2:	getfield_b_this 42;		// boolean CitadelWallet/im/status/keycard/SecureChannel.mutuallyAuthenticated
					ifeq L4;
				L3:	sconst_1;
					sreturn;
				L4:	sconst_0;
					sreturn;
		}

		.method public getRemainingPairingSlots()B 11 {
			.stack 1;
			.locals 0;

				L0:	getfield_b_this 50;		// byte CitadelWallet/im/status/keycard/SecureChannel.remainingSlots
					sreturn;
		}

		.method public reset()V 12 {
			.stack 2;
			.locals 0;

				L0:	getfield_a_this 45;		// reference CitadelWallet/im/status/keycard/SecureChannel.scEncKey
					invokeinterface 1 215 0;		// javacard/security/AESKey
					getfield_a_this 46;		// reference CitadelWallet/im/status/keycard/SecureChannel.scMacKey
					invokeinterface 1 215 0;		// javacard/security/AESKey
					aload_0;
					sconst_0;
					putfield_b 42;		// boolean CitadelWallet/im/status/keycard/SecureChannel.mutuallyAuthenticated
					return;
		}

		.method public updatePairingSecret([BB)V 13 {
			.stack 5;
			.locals 0;

				L0:	aload_1;
					sload_2;
					getfield_a_this 51;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingSecret
					sconst_0;
					bspush 32;
					invokestatic 167;		// javacard/framework/Util.arrayCopy([BS[BSS)S
					pop;
					return;
		}

		.method private checkPairingIndexAndGetOffset(B)S {
			.stack 2;
			.locals 1;

				L0:	sload_1;
					bspush 33;
					smul;
					sstore_2;
				L1:	sload_2;
					getfield_a_this 48;		// reference CitadelWallet/im/status/keycard/SecureChannel.pairingKeys
					arraylength;
					if_scmplt L3;
				L2:	sspush 27270;
					invokestatic 141;		// javacard/framework/ISOException.throwIt(S)V
				L3:	sload_2;
					sreturn;
		}

	}

	.class  SharedMemory extends 2.0 {		// extends java/lang/Object

		.fields {
			static final short CERT_LEN = 98;		// S
			static final byte[] ndefDataFile = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};		// [B
			static final byte[] cashDataFile = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};		// [B
			static 1.18 idPrivate;		// Ljavacard/security/ECPrivateKey;
			static final byte[] idCert = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};		// [B
		}

		.publicMethodTable 1 {
			equals(Ljava/lang/Object;)Z;
		}

		.packageMethodTable 0 {
		}

		.method  <init>()V {
			.stack 1;
			.locals 0;

				L0:	aload_0;
					invokespecial 186;		// java/lang/Object.<init>()V
					return;
		}

	}

	.class public ed25519 7 extends 2.0 {		// extends java/lang/Object

		.fields {
			private 4.10 eccPubKey 0;		// Lcom/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters;
			private 4.9 eccPriKey 1;		// Lcom/nxp/id/jcopx/security/ECPrivateKeyWithPredefinedParameters;
			private final byte[] DebugMasterPrivateKey 2;		// [B
			private final byte[] DebugMasterPublicKey 3;		// [B
			static final boolean DEBUG_MODE = 0;		// Z
		}

		.publicMethodTable 1 {
			equals(Ljava/lang/Object;)Z;
			SignData([BSS[BS)S;
			SignData(Lcom/nxp/id/jcopx/security/ECPrivateKeyWithPredefinedParameters;[BSS[BS)S;
			RegenerateKeyPair()V;
			GetPublicKey([BS)S;
			GetPrivateKey()Lcom/nxp/id/jcopx/security/ECPrivateKeyWithPredefinedParameters;;
			GetPrivateKey([BS)S;
			GetPublicKey()Lcom/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters;;
			VerifySignature([BSS[BSS)Z;
			VerifySignature([BS[BSS[BSS)Z;
			VerifySignature(Lcom/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters;[BSS[BSS)Z;
		}

		.packageMethodTable 0 {
		}

		.method public <init>()V 0 {
			.stack 5;
			.locals 0;

				L0:	aload_0;
					invokespecial 186;		// java/lang/Object.<init>()V
					aload_0;
					bspush 32;
					newarray 11;
					dup;
					sconst_0;
					bspush 67;
					bastore;
					dup;
					sconst_1;
					bspush -120;
					bastore;
					dup;
					sconst_2;
					bspush 115;
					bastore;
					dup;
					sconst_3;
					bspush 8;
					bastore;
					dup;
					sconst_4;
					bspush -58;
					bastore;
					dup;
					sconst_5;
					bspush 12;
					bastore;
					dup;
					bspush 6;
					bspush -3;
					bastore;
					dup;
					bspush 7;
					bspush -25;
					bastore;
					dup;
					bspush 8;
					bspush -31;
					bastore;
					dup;
					bspush 9;
					bspush 43;
					bastore;
					dup;
					bspush 10;
					bspush 19;
					bastore;
					dup;
					bspush 11;
					bspush -85;
					bastore;
					dup;
					bspush 12;
					bspush -2;
					bastore;
					dup;
					bspush 13;
					bspush -17;
					bastore;
					dup;
					bspush 14;
					bspush 62;
					bastore;
					dup;
					bspush 15;
					bspush 118;
					bastore;
					dup;
					bspush 16;
					bspush 12;
					bastore;
					dup;
					bspush 17;
					bspush 17;
					bastore;
					dup;
					bspush 18;
					bspush 12;
					bastore;
					dup;
					bspush 19;
					bspush -90;
					bastore;
					dup;
					bspush 20;
					bspush 126;
					bastore;
					dup;
					bspush 21;
					bspush 69;
					bastore;
					dup;
					bspush 22;
					bspush -101;
					bastore;
					dup;
					bspush 23;
					bspush 63;
					bastore;
					dup;
					bspush 24;
					sconst_1;
					bastore;
					dup;
					bspush 25;
					bspush 77;
					bastore;
					dup;
					bspush 27;
					bspush -113;
					bastore;
					dup;
					bspush 28;
					bspush -26;
					bastore;
					dup;
					bspush 29;
					bspush 8;
					bastore;
					dup;
					bspush 30;
					bspush -41;
					bastore;
					dup;
					bspush 31;
					bspush 106;
					bastore;
					putfield_a 52;		// reference CitadelWallet/im/status/keycard/ed25519.DebugMasterPrivateKey
					aload_0;
					bspush 32;
					newarray 11;
					dup;
					sconst_0;
					bspush -45;
					bastore;
					dup;
					sconst_1;
					bspush 10;
					bastore;
					dup;
					sconst_2;
					bspush 61;
					bastore;
					dup;
					sconst_3;
					bspush 46;
					bastore;
					dup;
					sconst_4;
					bspush 25;
					bastore;
					dup;
					sconst_5;
					bspush -117;
					bastore;
					dup;
					bspush 6;
					sconst_5;
					bastore;
					dup;
					bspush 7;
					bspush -104;
					bastore;
					dup;
					bspush 8;
					bspush 18;
					bastore;
					dup;
					bspush 9;
					bspush 50;
					bastore;
					dup;
					bspush 10;
					bspush -78;
					bastore;
					dup;
					bspush 11;
					bspush -12;
					bastore;
					dup;
					bspush 12;
					bspush -56;
					bastore;
					dup;
					bspush 13;
					bspush -72;
					bastore;
					dup;
					bspush 14;
					bspush -57;
					bastore;
					dup;
					bspush 15;
					bspush -86;
					bastore;
					dup;
					bspush 16;
					bspush -48;
					bastore;
					dup;
					bspush 17;
					bspush 101;
					bastore;
					dup;
					bspush 18;
					bspush 115;
					bastore;
					dup;
					bspush 19;
					bspush -121;
					bastore;
					dup;
					bspush 20;
					bspush 69;
					bastore;
					dup;
					bspush 21;
					bspush -69;
					bastore;
					dup;
					bspush 22;
					bspush -28;
					bastore;
					dup;
					bspush 23;
					bspush 68;
					bastore;
					dup;
					bspush 24;
					bspush -73;
					bastore;
					dup;
					bspush 25;
					bspush -17;
					bastore;
					dup;
					bspush 26;
					bspush 48;
					bastore;
					dup;
					bspush 27;
					bspush 36;
					bastore;
					dup;
					bspush 28;
					bspush -108;
					bastore;
					dup;
					bspush 29;
					bspush -39;
					bastore;
					dup;
					bspush 30;
					bspush -64;
					bastore;
					dup;
					bspush 31;
					bspush 97;
					bastore;
					putfield_a 53;		// reference CitadelWallet/im/status/keycard/ed25519.DebugMasterPublicKey
					aload_0;
					bspush -127;
					sconst_0;
					invokestatic 234;		// com/nxp/id/jcopx/security/KeyBuilderX.buildKey(BB)Ljavacard/security/Key;
					checkcast 0 235;		// T_CLASSORINTERFACE com/nxp/id/jcopx/security/ECPrivateKeyWithPredefinedParameters
					putfield_a 54;		// reference CitadelWallet/im/status/keycard/ed25519.eccPriKey
					aload_0;
					bspush -128;
					sconst_0;
					invokestatic 234;		// com/nxp/id/jcopx/security/KeyBuilderX.buildKey(BB)Ljavacard/security/Key;
					checkcast 0 237;		// T_CLASSORINTERFACE com/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters
					putfield_a 55;		// reference CitadelWallet/im/status/keycard/ed25519.eccPubKey
					getfield_a_this 54;		// reference CitadelWallet/im/status/keycard/ed25519.eccPriKey
					getfield_a_this 55;		// reference CitadelWallet/im/status/keycard/ed25519.eccPubKey
					invokestatic 239;		// com/nxp/id/jcopx/security/KeyBuilderX.genKeyPair(Ljavacard/security/PrivateKey;Ljavacard/security/PublicKey;)V
					return;
		}

		.method public SignData([BSS[BS)S 1 {
			.stack 7;
			.locals 1;

				L0:	getfield_a_this 54;		// reference CitadelWallet/im/status/keycard/ed25519.eccPriKey
					bspush -93;
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					invokestatic 240;		// com/nxp/id/jcopx/security/CryptoBaseX.sign(Ljavacard/security/Key;B[BSS[BS)S
					sstore 6;
				L1:	aload_0;
					aload 4;
					sconst_0;
					bspush 32;
					invokespecial 241;		// CitadelWallet/im/status/keycard/ed25519.BigToLittleEndian([BSS)V
					aload_0;
					aload 4;
					bspush 32;
					bspush 32;
					invokespecial 241;		// CitadelWallet/im/status/keycard/ed25519.BigToLittleEndian([BSS)V
					sload 6;
					sreturn;
		}

		.method public SignData(Lcom/nxp/id/jcopx/security/ECPrivateKeyWithPredefinedParameters;[BSS[BS)S 2 {
			.stack 7;
			.locals 1;

			.descriptor	Lcom/nxp/id/jcopx/security/ECPrivateKeyWithPredefinedParameters;	4.9;

				L0:	aload_1;
					bspush -93;
					aload_2;
					sload_3;
					sload 4;
					aload 5;
					sload 6;
					invokestatic 240;		// com/nxp/id/jcopx/security/CryptoBaseX.sign(Ljavacard/security/Key;B[BSS[BS)S
					sstore 7;
				L1:	aload_0;
					aload 5;
					sconst_0;
					bspush 32;
					invokespecial 241;		// CitadelWallet/im/status/keycard/ed25519.BigToLittleEndian([BSS)V
					aload_0;
					aload 5;
					bspush 32;
					bspush 32;
					invokespecial 241;		// CitadelWallet/im/status/keycard/ed25519.BigToLittleEndian([BSS)V
					sload 7;
					sreturn;
		}

		.method public RegenerateKeyPair()V 3 {
			.stack 2;
			.locals 0;

				L0:	getfield_a_this 54;		// reference CitadelWallet/im/status/keycard/ed25519.eccPriKey
					getfield_a_this 55;		// reference CitadelWallet/im/status/keycard/ed25519.eccPubKey
					invokestatic 239;		// com/nxp/id/jcopx/security/KeyBuilderX.genKeyPair(Ljavacard/security/PrivateKey;Ljavacard/security/PublicKey;)V
					return;
		}

		.method public GetPublicKey([BS)S 4 {
			.stack 4;
			.locals 1;

				L0:	getfield_a_this 55;		// reference CitadelWallet/im/status/keycard/ed25519.eccPubKey
					aload_1;
					sload_2;
					invokeinterface 3 237 6;		// com/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters
					sstore_3;
				L1:	aload_0;
					aload_1;
					sconst_0;
					sload_3;
					invokespecial 241;		// CitadelWallet/im/status/keycard/ed25519.BigToLittleEndian([BSS)V
					sload_3;
					sreturn;
		}

		.method public GetPrivateKey()Lcom/nxp/id/jcopx/security/ECPrivateKeyWithPredefinedParameters; 5 {
			.stack 1;
			.locals 0;

			.descriptor	Lcom/nxp/id/jcopx/security/ECPrivateKeyWithPredefinedParameters;	4.9;

				L0:	getfield_a_this 54;		// reference CitadelWallet/im/status/keycard/ed25519.eccPriKey
					areturn;
		}

		.method public GetPrivateKey([BS)S 6 {
			.stack 3;
			.locals 1;

				L0:	getfield_a_this 54;		// reference CitadelWallet/im/status/keycard/ed25519.eccPriKey
					aload_1;
					sload_2;
					invokeinterface 3 235 6;		// com/nxp/id/jcopx/security/ECPrivateKeyWithPredefinedParameters
					sstore_3;
				L1:	sload_3;
					sreturn;
		}

		.method public GetPublicKey()Lcom/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters; 7 {
			.stack 1;
			.locals 0;

			.descriptor	Lcom/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters;	4.10;

				L0:	getfield_a_this 55;		// reference CitadelWallet/im/status/keycard/ed25519.eccPubKey
					areturn;
		}

		.method public VerifySignature([BSS[BSS)Z 8 {
			.stack 8;
			.locals 2;

				L0:	sconst_0;
					sstore 7;
				L1:	sconst_0;
					sstore 8;
				L2:	getfield_a_this 55;		// reference CitadelWallet/im/status/keycard/ed25519.eccPubKey
					bspush -93;
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					sload 6;
					invokestatic 242;		// com/nxp/id/jcopx/security/CryptoBaseX.verify(Ljavacard/security/Key;B[BSS[BSS)S
					sstore 8;
				L3:	goto L5;
				L4:	pop;
					sconst_0;
					sstore 7;
				L5:	sload 8;
					sspush 23130;
					if_scmpne L7;
				L6:	sconst_1;
					sstore 7;
				L7:	sload 7;
					sreturn;
			.exceptionTable {
				// start_block end_block handler_block catch_type_index
				L2 L3 L4 97;
			}
		}

		.method public VerifySignature([BS[BSS[BSS)Z 9 {
			.stack 8;
			.locals 3;

				L0:	sconst_0;
					sstore 9;
				L1:	sconst_0;
					sstore 10;
				L2:	bspush -128;
					sconst_0;
					invokestatic 234;		// com/nxp/id/jcopx/security/KeyBuilderX.buildKey(BB)Ljavacard/security/Key;
					checkcast 0 237;		// T_CLASSORINTERFACE com/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters
					astore 11;
				L3:	aload_0;
					aload_1;
					sconst_0;
					sload_2;
					invokespecial 243;		// CitadelWallet/im/status/keycard/ed25519.LittleToBigEndian([BSS)V
					aload 11;
					aload_1;
					sconst_0;
					sload_2;
					invokeinterface 4 237 5;		// com/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters
				L4:	aload 11;
					bspush -93;
					aload_3;
					sload 4;
					sload 5;
					aload 6;
					sload 7;
					sload 8;
					invokestatic 242;		// com/nxp/id/jcopx/security/CryptoBaseX.verify(Ljavacard/security/Key;B[BSS[BSS)S
					sstore 10;
				L5:	goto L7;
				L6:	pop;
					sconst_0;
					sstore 9;
				L7:	sload 10;
					sspush 23130;
					if_scmpne L9;
				L8:	sconst_1;
					sstore 9;
				L9:	sload 9;
					sreturn;
			.exceptionTable {
				// start_block end_block handler_block catch_type_index
				L4 L5 L6 97;
			}
		}

		.method public VerifySignature(Lcom/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters;[BSS[BSS)Z 10 {
			.stack 8;
			.locals 2;

			.descriptor	Lcom/nxp/id/jcopx/security/ECPublicKeyWithPredefinedParameters;	4.10;

				L0:	sconst_0;
					sstore 8;
				L1:	sconst_0;
					sstore 9;
				L2:	aload_1;
					bspush -93;
					aload_2;
					sload_3;
					sload 4;
					aload 5;
					sload 6;
					sload 7;
					invokestatic 242;		// com/nxp/id/jcopx/security/CryptoBaseX.verify(Ljavacard/security/Key;B[BSS[BSS)S
					sstore 9;
				L3:	goto L5;
				L4:	pop;
					sconst_0;
					sstore 8;
				L5:	sload 9;
					sspush 23130;
					if_scmpne L7;
				L6:	sconst_1;
					sstore 8;
				L7:	sload 8;
					sreturn;
			.exceptionTable {
				// start_block end_block handler_block catch_type_index
				L2 L3 L4 97;
			}
		}

		.method private BigToLittleEndian([BSS)V {
			.stack 5;
			.locals 3;

				L0:	sload_3;
					newarray 11;
					astore 4;
				L1:	sconst_0;
					sstore 6;
				L2:	goto L5;
				L3:	sload_3;
					sconst_1;
					ssub;
					sload 6;
					ssub;
					sload_2;
					sadd;
					sstore 5;
				L4:	aload 4;
					sload 6;
					aload_1;
					sload 5;
					baload;
					bastore;
					sinc 6 1;
				L5:	sload 6;
					sload_3;
					if_scmplt L3;
				L6:	aload 4;
					sconst_0;
					aload_1;
					sload_2;
					sload_3;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					return;
		}

		.method private LittleToBigEndian([BSS)V {
			.stack 5;
			.locals 3;

				L0:	sload_3;
					newarray 11;
					astore 4;
				L1:	sconst_0;
					sstore 6;
				L2:	goto L5;
				L3:	sload_3;
					sconst_1;
					ssub;
					sload 6;
					ssub;
					sload_2;
					sadd;
					sstore 5;
				L4:	aload 4;
					sload 5;
					aload_1;
					sload 6;
					baload;
					bastore;
					sinc 6 1;
				L5:	sload 6;
					sload_3;
					if_scmplt L3;
				L6:	aload 4;
					sconst_0;
					aload_1;
					sload_2;
					sload_3;
					invokestatic 95;		// javacard/framework/Util.arrayCopyNonAtomic([BS[BSS)S
					pop;
					return;
		}

	}

}
